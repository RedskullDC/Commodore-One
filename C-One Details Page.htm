<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0060)http://www.geocities.com/profdredd/commodoreone/cmdrone.html -->
<HTML><HEAD><TITLE>C-One Details Page</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<SCRIPT 
language=JavaScript>var PUpage="76001067"; var PUprop="geocities"; </SCRIPT>

<SCRIPT language=JavaScript src="C-One Details Page_files/pu5geo.js"></SCRIPT>

<SCRIPT language=JavaScript> var thGetOv="http://themis.geocities.yahoo.com/themis/h.php"; var thCanURL="http://us.geocities.com/profdredd/commodoreone/cmdrone.html"; var thSpaceId="76001067"; var thIP="203.46.226.25"; var thTs="1143606965"; var thCs="3768c358f223780f8f5f3c8b5bf80f3d";</SCRIPT>
<NOSCRIPT><LINK 
href="http://themis.geocities.yahoo.com/jsoff.css?thIP=203.46.226.25&amp;thTs=1143606965" 
rel=stylesheet></NOSCRIPT>
<SCRIPT language=JavaScript src="C-One Details Page_files/geovck08.js"></SCRIPT>
<!-- text above generated by server. PLEASE REMOVE -->
<META content="MSHTML 6.00.2900.2802" name=GENERATOR></HEAD>
<BODY 
bgColor=#eeeeee><!-- following code added by server. PLEASE REMOVE --><LINK 
href="C-One Details Page_files/div.css" type=text/css rel=stylesheet>
<SCRIPT language=JavaScript src="C-One Details Page_files/div03.js"></SCRIPT>
<!-- preceding code added by server. PLEASE REMOVE -->
<P><A href="http://www.geocities.com/profdredd"><IMG alt=HOME 
src="C-One Details Page_files/gologo.gif"></A> </P>
<HR>

<H1 align=center>C-One Prototype and Details</H1>
<H2>Introducing ... the C-One</H2>
<UL>
  <LI><A href="http://www.geocities.com/profdredd/commodoreone/c1-2.jpg" 
  target=_blank alt="view C-One R1 board">C-One&nbsp;R1&nbsp;board</A> 
  <LI><A href="http://c64upgra.de/c-one/s_pictures.htm" target=_blank 
  alt="View more pics">More&nbsp;C-One&nbsp;pics</A> at the <A 
  title="Official C-One website" href="http://www.c64upgra.de/c-one" 
  target=_blank>C-One website</A> </LI></UL>
<TABLE border=1>
  <CAPTION><BIG>Color key for this page</BIG></CAPTION>
  <TBODY>
  <TR>
    <TD bgColor=#00ffff>( ) 
    <TD>indicates Jeri's original data 
  <TR>
    <TD bgColor=#ffff00>( ) 
    <TD>NEW STUFF, NEEDS CHECKING! </TR></TBODY></TABLE>
<H2><I>KwikJump</I> ®tm</H2>
<UL>
  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#intro">A 
  Short Introduction</A> 
  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#news">News</A> 

  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#overview">C-One&nbsp;Overview</A> 

  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#general">General&nbsp;Information</A> 

  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#monstersid">MonsterSID&nbsp;Data</A> 

  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#supervic">SuperVIC&nbsp;Details</A> 

  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#how">How is 
  it done? (Technical)</A> 
  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#cpuslot">Processor 
  Slot (Technical)</A> 
  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#busspeed">Bus 
  Speed (Technical)</A> 
  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#links">C-One&nbsp;Links</A> 

  <LI><A 
  href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#subscribe">Subscribe&nbsp;to&nbsp;CommodoreOne</A> 
  </LI></UL><A name=intro>
<H2>A Short Introduction</H2></A>
<TABLE border=1>
  <TBODY>
  <TR>
    <TD bgColor=#ffff00>
      <P>C-One is a project begun about 3 years ago by a gifted computer 
      enthusiast named Jeri Ellsworth. Her original concept was to develop a 
      Video Accelerator card for use on a Commodore C-64. The card would allow 
      the C-64 to use SuperVGA graphics modes when connected to a standard 
      VGA/SVGA monitor. The project was based upon FPGA chips into which her 
      hardware functions would be preprogrammed </P>
      <P>As time progressed Jeri had to further integrate increasingly more of 
      the original C-64 into her FPGA design. This was necessary to overcome 
      innate limitations of the orignal 1 MHz 64 KByte design of the stock C-64. 
      At some point she saw that she had essentially recreated the entire C-64 
      in her design. Having done so, she set herself to a more ambitious task, 
      to create a modern computer with modern computer features which would 
      remain compatible with traditional C-64 applications </P>
      <P>The new computer was dubbed <EM>CommodoreOne</EM> (later 
      <EM>C-One</EM>) and represents a logical evolutionary leap for Commodore 
      users. The goal is to provide direct access to modern computer features 
      and peripherals while retaining and preserving the personality and 
      features which defined the classic C-64 experience. I see C-One as the 
      computer Commodore would have produced if they had continued to develop 
      and enhance the C-64 </P>
      <P>A 32-bit microprocessor is also being developed by a third person, 
      Gideon Zweijtzer. The new processor exists on FPGA and will interface 
      directly with the C-One motherboard. It will be 6502 code compatible but 
      expands the bus to 32 bits. The opcode set will be expanded and enhanced 
      to accomodate 32-bit operations </P>
      <P>A FAT-16/32 filesystem is being developed for controlling IDE drives 
      and Compact Flash devices. The filesystem currently supports selecting and 
      loading an FPGA image from disk on startup </P>
      <P>Now Jeri has teamed with Jens Schoenfeld in Germany to help with 
      development and production of the new computer. Jens has become a key 
      player in C-One development and has worldwide recognition already as an 
      honest and trustworthy associate. With this merger comes serious plans for 
      the future of C-One as a reconfigurable computer. In the future it will be 
      possible to download a new core for the FPGA to configure C-One as most 
      any classic 8-bit computer. I imagine this will include such favorites as 
      the Atari 2600 and 8-bit series, TI 99/4a, Tandy/CoCo and many others </P>
      <P>C-One is a work in progress and the hardware, specifications and 
      features are constantly changing. The information here is not a list of 
      promises but an attempt to reflect the current state and direction of 
      development. With that in mind, I hope the C-One Details page will serve 
      as a useful resource to Commodore fans </P></TR></TBODY></TABLE>
<HR width="50%">
<A name=News>
<H2>News</H2></A>
<TABLE bgColor=#ffff00 border=3>
  <TBODY>
  <TR>
    <TD>
      <P>Date: Sun, 18 May 2003</P>
      <P>I've debugged the floppy head/motor/step control circuit today and 
      tested it against MV's test program. I added the keyboard fifo empty = 
      carry on the lka command. Hopefully this will fix some of the keyboard 
      bugs MV's been experiencing. I'm adding some video control registers for 
      the drive CPU so it can control the resolution and frequency on startup 
      </P>
      <P>Jeri</P>
      <P>Date: Fri, 16 May 2003</P>
      <P>MV and I have pretty much found all the bugs in the drive CPU's 
      graphics controller and fixed them tonight. I've been fixing a few 
      glitches in the memory interface between the drive CPU and the main memory 
      and fixed a refresh problem on the SDRAM </P>
      <P>Jeri</P>
      <P>Date: Thu, 15 May 2003 
      <P>I just implemented the loading of code into the drive cpu after 
      booting. This allows you to write things that run independently of the 
      main system - ideal for something like the 1581 emulator. There are a few 
      things to think about: </P>
      <UL>
        <LI>The file should be called 0DRIVE.BIN (or 1DRIVE.BIN, etc) 
        <LI>It mustn't be any longer than 32768 bytes, and should *not* have a 
        2-byte load address 
        <LI>It's loaded at $4000 
        <LI>It's executed with a jmp $4000 *after* the FPGA config and any ROM 
        image files are loaded 
        <LI>The 0DRIVE.BIN is responsible for finishing the boot sequence, the 
        last part of the boot ROM's main routine is *not* run. Basically, this 
        consists of resetting the 65816, and then releasing /DMA. See the code 
        following jsr boot in main.s for an example </LI></UL>
      <P>Of course, you can also just this as a way of not starting the 65816 
      (or whatever CPU is in the CPU slot). A file with just jmp * would 
      effectively keep the main CPU off the bus, leaving the 1K100 free to do 
      whatever it wants. I have no idea if this is useful or not, but the 
      possibility's there </P>
      <P>Thanks to Jeri and Jens putting off the release a little bit, I've had 
      a chance to improve the boot rom a *lot*. The code has really matured over 
      the last two weeks. So what's left to do? My TODO list for 1.0 currently 
      consists of: </P>
      <UL>
        <LI>Add FLASH.BIN loading (needed for upgrading the 29F010, this is a 
        showstopper) 
        <LI>Fix drive size display (anyone with a good routine for printing a 
        32-bit sector count in a friendly fashion, intelligently placing the 
        comma and selecting the right prefix? Pitch in!) 
        <LI>Add low level floppy support (Adrian's waiting for Jeri to implement 
        the floppy instructions) 
        <LI>Fix a bug in FAT12 loading (still investigating this one, possibly 
        Adrian's) 
        <LI>Add version number printing, for easy identification of boot ROMs 
        <LI>Add a readme.txt with instructions, acknowledgements, and so forth 
        </LI></UL>
      <P>Unless any new bugs crop up, the boot rom will then be finished (in the 
      sense that it behaves according to the spec). I'll be branching the code 
      into a 1.0 tree as soon as I figure out how to do it with CVS </P>
      <P>Date: Fri, 9 May 2003</P>
      <P>First I would like to thank MagerValp and Adrian for working so hard on 
      the boot up code. It's really coming along nicely. I'll be sending the 
      second developer board out today to Adrian, so he can start testing his 
      code on real hardware </P>
      <P>I've been trying to get over a bad flu/cold that I picked up the day 
      after I got home. I guess being sleep deprived so many days before I flew 
      home didn't help my immune system any. I'm feeling much better each day 
      now and have started to get more and more done </P>
      <P>I've fixed a bug that MV discovered in the drive cpu's adc abs,y, where 
      the flags and values were not being stored. I've done a lot of work on the 
      new DMA transfer circuit between the main system memory and the drive cpu. 
      The circuit for flashing is now done and ready for software. I've also 
      fixed a few bugs in the main memory arbitration. I'll try to post an 
      update every few days from now on, since we are on the final stretch </P>
      <P>Jeri</P>
      <P>Date: Fri, 09 May 2003</P>
      <P>I can't answer for Jens or Jeri, but the boot code is making a lot of 
      progress. Instead of burning a new eprom every time I compile a new 
      version, I made a small rom that receives the boot code over RS-232. This 
      means that it now takes about 10 seconds for me to test the code, instead 
      of 10 minutes. Development speed up, frustration level down </P>
      <P>The code is at the point where it almost does what it's supposed to. 
      The code to select a configuration by holding down 0..9 got a long overdue 
      fix last night. Bus scanning is still a bit flaky, but it at least seems 
      to find all the hard drives I throw at it (including CF cards). CD-ROMs 
      are still not cooperating though. Filesystem handling has been completely 
      abstracted, making it possible for me to start working on the ISO9660 
      support. Adrian Gonzalez has joined the project, and will be working on 
      floppy support and flash upgrade code </P>
      <P>FAT12 is almost done (it's just a variant on FAT16), and he's also 
      thinking about putting 1581 support in there. I've added some more stuff 
      to the project homepage <A 
      href="http://c1boot.sourceforge.net/">http://c1boot.sourceforge.net/</A> 
      including a small news section. I'll try to keep it updated whenever 
      there's a significant feature added or a particularly nasty bug has been 
      squashed. </P>
      <P>magervalp2000</P>
      <P>Date: Tue, 29 Apr 2003</P>
      <P>I wanted to let everyone know that the production of c1's is going well 
      and that I've been away from email for quite some time. I'll do my best to 
      confirm the orders that have arrived by email before I leave. <B>The first 
      board shipped shipped yesterday to MV who is programming the drive boot 
      code!</B> Well back to work.. The boards come off the machines at about 1 
      every 6 minutes and it's taking a lot longer than that to test each one 
      </P>
      <P>Jeri</P>
      <P>April 10, 2003</P>
      <H3>C-One production started</H3>
      <P>After more than two years development time, the C-One production has 
      started. It'll start selling on may 5th in Germany and the Netherlands. 
      Our other European partners should have the boards by may 9th, when the 
      board will also be launched in North America </P>
      <P>Many projects have dealt with re-configurable computers so far, but 
      none of them is as consistent and flexible as the C-One. Other projects 
      only kept parts of the hardware re-configurable, but the C-One can change 
      the behaviour of it's chipset even during runtime. Therefore, the C-One is 
      the world's first re-configurable computer. Read more on the official 
      homepage of the C-One: <A title="Official C-One website" 
      href="http://www.c64upgra.de/c-one" 
      target=_blank>www.c64upgra.de/c-one</A> </P>
      <P>There has been silence from our side for the past weeks. The main 
      reason was that we focused on the work, taking all the time off any spare 
      time activity. The Delfina production was kind of a dress rehersal for the 
      C-One production, as it was organized as precise as we are now organising 
      the C-One production. A new PCB production partner has proved to deliver 
      very high quality at decent prices, and - most important - with a highly 
      predictable production schedule. Since all other partners who deliver 
      parts and services for the production of <A 
      href="http://www.jschoenfeld.de/" 
      target=_blank>individual&nbsp;Computers</A> are known to be in time, the 
      following timetable will presumably be 95% accurate </P>
      <P>As you can see, the next three weeks will be <B>very busy</B>. Please 
      understand that we probably will not answer all questions in time until 
      the production is done. The chance to implement physical changes is long 
      gone. Adding an internal IEC is not possible any more. Moving the CF 
      connector to a different position is impossible. The C-64 cartridge 
      connector has now half an inch space to the audio connector, more was not 
      possible. If you make suggestions for changes now, please understand that 
      we can only implement it if this can be done with a core change. All 
      physical things are written in stone now </P>
      <P>Our stress level will be a lot higher than usual until the end of the 
      month. The best time to get questions answered will probably be the <A 
      title="Breakpoint Party website" href="http://breakpoint.untergrund.net/" 
      target=_blank>Breakpoint Party</A>, any other day might either be too busy 
      to answer email, or we're too far away from the next internet-connected 
      computer </P>
      <UL>
        <LI>April 7th: All electrical testing on the January prototype board is 
        done 
        <LI>April 8th: Final changes on the motherboard done 
        <LI>April 9th: PCB data for copper layers, solderstop and drill data 
        confirmed 
        <LI>April 10th: Inner layer production starts 
        <LI>April 11th: Deadline for silkscreen data 
        <LI>April 14th: Prepreg and outer layer mounting, drilling starts 
        <LI>April 15th: Drilled sample arrives at assembly house to prepare 
        machine setup 
        <LI>April 18th to 21st: Breakpoint Party. The one and only existing 
        <EM>C-One rev 2</EM> will be on display there. Working! 
        <LI>April 22nd: SMD lasermask will be delivered 
        <LI>April 24th: Board house delivers boards to electrical test house 
        <LI>April 25th: pick up PCBs at board house, drive to the assembly 
        company <B>immediately</B> 
        <LI>April 25th: (probably evening): Start setup of the machines 
        <LI>April 26th: With a little luck, the first C-One out of the 
        mass-production will be fired up 
        <LI>April 27th: If there are any flaws, this day is reserved to locate 
        the faults (assembly company does not work on Sundays anyway :-)) 
        <LI>April 28th to April 30th: Mass production of 300 boards. Jeri and I 
        will be present at the assembly house to do <EM>online testing</EM> and 
        support the workforce. Early startup ROMs will be programmed with the 
        latest version 
        <LI>May 1st: Jeri's flight home to Portland, Oregon USA with as many 
        boards in her luggage as the weight will allow :-) 
        <LI>May 2nd: First shipments to retail partners of individual Computers 
        <LI>May 5th: Shipments arrive at German retail partners, shipping to 
        customers can start 
        <LI>May 9th: By now, all European partners should have received their 
        shipments of C-One boards 
        <LI>May 12th: Jeri should have completed all the work that was left 
        undone during the past five months. Shipment of the boards to North 
        American customers starts </LI></UL>
      <P>To make things clear again: This is a <EM>developer board</EM>. Do not 
      buy it for what it may become in the future. If you buy it, then buy it 
      for what it is right now: A board that will experience a lot of core 
      changes. You will need a PC to have access to the Internet, because that 
      will be the only place where you can retrieve new cores. Depending on the 
      state of the early startup ROM (which is not re-configurable!), you can 
      either boot from CD (CD-writer in the PC necessary!), or from CompactFlash 
      (CF cardwriter for the PC necessary!). Booting from CF and from hard drive 
      is already implemented. Booting from CD is not yet implemented, but 
      MagerValp is already working on it. Thanks again for his great support in 
      getting the early startup procedure to work </P>
      <P>The big difference between <EM>developer board</EM> and <EM>user 
      board</EM> will be the availability of software and cores. We've paid 
      thousands of Euros for tooling cost, which are impossible to pay with just 
      a production run of 300. If the design would be changed in any way, we'd 
      have to pay tooling cost again, and this is totally out of the question 
      </P>
      <H3>What does <EM>developer board</EM> mean?</H3>
      <UL>
        <LI>you will have to remove the CPU out of it's socket if you want to 
        use a CPU card 
        <LI>you will have to remove the ROM chip out of it's socket to upgrade 
        to a new early startup procedure 
        <LI>you will have to be flexible with your programming, because memory 
        maps might change slightly as cores evolve 
        <LI>there will be bugs in the cores. So many bugs that many C64 programs 
        won't run until the cores are adapted 
        <LI>you will have to be patient. If you can't wait a week or two for the 
        next core, don't buy now! 
        <LI>it cannot outperform a PC. It will never do! </LI></UL>
      <P>If you have any doubts, don't buy now. Only buy after all doubts are 
      gone. And again -- Only buy for what the machine is at the time of your 
      order. Do not buy it for something it might become in the future, because 
      our plans might change without notice: </P>
      <UL>
        <LI>if you want to run CP/M, wait until the Z80 CPU module and the 
        corresponding CBIOS is available 
        <LI>if you want to run C64 games and demos cycle-accurate, wait until 
        the 6502 module is available 
        <LI>if you want to use it as VIC-20, wait until the VIC-20 core is 
        available 
        <LI>if you want to use it as PET, wait until the PET core is available 
        <LI>if you want to use it as Ohio Scientific Challenger, wait until the 
        Challenger core is available 
        <LI>if you want to use it as ZX-81, wait until the doorstop core is 
        available 
        <LI>if you want to use it as Spectrum, wait until the Speccy core is 
        available 
        <LI>if you want to use it as Apple II (e, GS), wait until the Apple II 
        core is available 
        <LI>if you want to use it as a dual-monitor system, wait until the 
        secondary monitor adapter is available 
        <LI>if you want to play Atari 2600 games, wait until the Atari 2600 core 
        is available </LI></UL>
      <P>...you get the point: If you want something and it's not coming fast 
      enough ... <B>Learn <A 
      href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=vhdl" 
      target=_blank>VHDL</A> and do it yourself! Oh, and if you're not prepared 
      to pay a nominal fee for each core, then never buy the machine</B> </P>
      <P><A href="mailto:cm_easy@yahoo.com">Jeri Ellsworth</A><BR><A 
      href="mailto:jens@jschoenfeld.de">Jens Schoenfeld</A> 
</P></TR></TBODY></TABLE><A name=overview>
<H2>C-One Overview</H2></A>
<P><CITE>Some of the following text was copied from the <A 
title="Old CommodoreOne Home Page" href="http://www.commodoreone.com/" 
target=_blank>CommodoreOne</A> website because that site is sometimes 
unresponsive due to overwhelming traffic. It was originally posted by <A 
title="email to Jeri" href="mailto:cm_easy@yahoo.com">Jeri&nbsp;Ellsworth</A>, 
developer of the C-One</CITE> </P>
<TABLE bgColor=#00ffff border=1>
  <TBODY>
  <TR>
    <TD>
      <P>The CommodoreOne computer started off as a 2002 enhanced adaptation of 
      the Commodore 64. During development it evolved into <B>the C-One 
      Re-Configurable Computer</B>, a new class of computer where the chips do 
      not have dedicated tasks any more. By programming the FPGAs with new 
      <EM>cores</EM>, it should be possible to turn the C-One into clones of 
      famous 80's computers like the C-64, VIC-20, Plus/4, TI-99/4a, Atari 2600, 
      Atari 8-bit series, Sinclair Spectrum, ZX81, Schneider CPC and others. It 
      can of course also be a completely new computer with specs unknown to 
      these milestones in computer history </P>
      <P>Here is a General Overview of the features of the C-One as of December 
      22, 2002. Some features may change slightly as development progresses </P>
      <DL>
        <DT><B>What it is</B> 
        <DD>
        <UL>
          <LI>The C-One computer is a 2002 enhanced adaptation of the <A 
          title="Most sold of any computer model (Guiness book of World Records)" 
          href="http://www.geocities.com/profdredd/images/worldrecord-c64.jpg" 
          target=_blank>Commodore&nbsp;64</A>. While retaining almost all of the 
          original's capabilities the C-One adds modern features, interfacing 
          and capabilities and fills a sorely needed gap in the hobbyist 
          computer market 
          <LI>The estimated price will be around $200 USD (249,- EUR including 
          German sales tax of 16%). User will need to supply a <A 
          title="help ATX case" href="http://pcguide.com/ref/case/form.htm" 
          target=_blank>ATX</A> style case, <A title="help ATX power" 
          href="http://pcguide.com/ref/power/sup/formATX-c.html" 
          target=_blank>ATX&nbsp;power&nbsp;supply</A>, disk drive(s), <A 
          title="help PS/2" 
          href="http://www.webopedia.com/TERM/P/PS_2_port.html" 
          target=_blank>PS/2</A> keyboard and mouse and an <A title="help VGA" 
          href="http://webopedia.com/TERM/V/VGA.html" target=_blank>SVGA</A> 
          capable monitor </LI></UL></DD></DL>
      <H3>Features/Product Description</H3>
      <DL>
        <DT><B>Physical Appearance</B> 
        <DD>
        <UL>
          <LI>As sold the C-One will be a <A title="define motherboard" 
          href="http://webopedia.com/TERM/m/motherboard.html" 
          target=_blank>motherboard</A> ready to mount into a <A 
          title="show ATX case" 
          href="http://www.pcguide.com/ref/case/styles.htm" 
          target=_blank>ATX&nbsp;style&nbsp;computer&nbsp;case</A>. Ports will 
          match the holes of the case as well as additional port connectors will 
          be included for addition through <A title="help ports" 
          href="http://pcguide.com/ref/case/partsIO-c.html" 
          target=_blank>punch-out&nbsp;ports&nbsp;on&nbsp;the&nbsp;case</A> you 
          pick </LI></UL></DD></DL>
      <DL>
        <DT><B>Power</B> 
        <DD>
        <UL>
          <LI>Connectors on the C-One will be <A title="show ATX board" 
          href="http://www.pctechguide.com/01mboards.htm#ATX" 
          target=_blank>ATX-style</A>. The C-One board is designed for a 5vDC 
          power source and accommodations have been made to keep the machine as 
          <STRONG>laptop/portable capable</STRONG> as possible 
          <LI><A title="about soft power" 
          href="http://pcguide.com/ref/power/sup/funcSoftPower-c.html" 
          target=_blank><EM>ATX&nbsp;power-down</EM></A> can be controlled by 
          software </LI></UL></DD></DL>
      <DL>
        <DT><B>CPU/Speed</B> 
        <DD>
        <UL>
          <LI>The main processor of the C1 is a <A title="WDC website" 
          href="http://www.westerndesigncenter.com/" target=_blank>65c816</A> 
          processor running approximately at 20 MHz. The 65c816 is a 6502 
          compatible processor with a 24 bit address range. Extra instructions 
          that access the full memory range are added to the 6502 core. The 
          C-One has a processor slot for any other 8-bit CPU such as a real 
          6502, Z80, 6809 or even the Z8S180. Pinouts and footprints are also 
          documentented to the public 
          <UL>
            <LI>Software throttle for classic 64 speeds</LI></UL>
          <LI>The <A title="help bus" 
          href="http://webopedia.com/TERM/s/system_bus.html" 
          target=_blank>system&nbsp;bus&nbsp;runs&nbsp;at&nbsp;50MHz</A>, the 
          60Hz CIA clock of the system is provided by internal circuitry 
          <LI>Secondary 6502 processor for I/O support </LI></UL></DD></DL>
      <DL>
        <DT><B>SuperVIC Video Capabilities</B> 
        <DD>
        <UL>
          <LI><A title="VGA display modes" 
          href="http://www.pctechguide.com/05graphics.htm" 
          target=_blank>VGA&nbsp;monitor&nbsp;output</A> 
          <LI>VIC-II compatible in all video modes, 60Hz/50Hz emulation is 
          software selectable 
          <LI>Classic Emulation &amp; SuperVIC Mode is software selectable 
          <LI>Extended video modes as well as combination modes with classic 
          VIC-II modes are possible 
          <UL>
            <LI>Memory addresses of features (character matrix, screen memory, 
            color RAM, etc.) are each 24 bit addressable (except for the color 
            palette which resides inside the chip's memory) 
            <LI>16MB video RAM with adjustable mirroring/or relocation from CPU 
            memory 
            <LI>Max Resolution 1280x1024 Sync settings from 60Hz-? (depends on 
            resolution) 
            <LI>Maximum of 256 colors out of a <A title="define pallette" 
            href="http://webopedia.com/TERM/P/palette.html" 
            target=_blank>palette</A> of 65,535 in regular and linear modes 
            <LI>A special <A title="help Chunky" 
            href="http://www.nvg.ntnu.no/amiga/amigafaq/AmigaFAQ_16.html" 
            target=_blank><EM>Chunky&nbsp;video&nbsp;mode</EM></A> with access 
            to entire palette (limitations apply) 
            <LI>Graphics modes include 64 style cell video and linear video 
            <LI>Hardware based line drawing/fill &amp; pattern fills/overlay, 
            scaling? 
            <LI><A title="help Overscan" 
            href="http://www.cinereal.com/amiga/Video.html" 
            target=_blank>Overscan</A> 
            <LI>Windowing mode (view a portion of a 1280x1024 display on a 
            320x200 window &amp; scroll) 
            <LI>Full byte Color RAM can be moved now! 
            <LI><A title="define blitter" 
            href="http://www.dictionary.com/search?q=blitter" 
            target=_blank>Blitter&nbsp;functions</A> (BLock Image TRansfer) 
            Logical operation AND, OR, XOR 
            <LI>On-Board <A title="about Copper" 
            href="http://amiga.emugaming.com/customchips.html" 
            target=_blank><EM>Copper&nbsp;Processor</EM></A> <A 
            href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#overnotes">*</A> 
            </LI></UL>
          <LI>8 Sprites 
          <UL>
            <LI>Can have up to 256x256 resolution 
            <LI>Can use classic linear or 64 video style graphics (pick up 
            screen image?) 
            <LI>Mouse controlled <EM>mouse sprite</EM> 
            <LI>Based on a 320 <A title="about dot clock" 
            href="http://www.tldp.org/HOWTO/XFree86-Video-Timings-HOWTO/basic.html" 
            target=_blank>dot&nbsp;clock</A> (same pixel size/position on all 
            video modes) 
            <LI>Video expansion connector for digital and analog video 
            expansions </LI></UL></LI></UL></DD></DL>
      <DL>
        <DT><B>MonsterSID Audio</B> 
        <DD>
        <UL>
          <LI>Classic SID Emulation (including address mirroring) 
          <LI>MonsterSID Mode 
          <UL>
            <LI>16 stereo SID voices (1-8 left, 9-16 right) 
            <LI>Sync and Ring Modulation and filtering on all voices 
            <LI>Extra voices mapped in order after the first three </LI></UL>
          <LI><A title="define DMA" href="http://webopedia.com/TERM/D/DMA.html" 
          target=_blank>DMA</A> audio 
          <UL>
            <LI>8 Stereo voices (4 left, 4 right) 
            <LI>64k internal sound memory (sound or instruments) as well as 
            access to main CPU memory for playing DMA clips 
            <LI>Variable sample playback rate 
            <LI>Audio resolution of 8 bits 
            <LI>DMA segment playback can be either continuous (loop) or one-shot 
            (note/segment) 
            <LI>two sockets for classic SID chips, Monster SID audio can be 
            routed through their analog filters (prepared for more analog audio 
            routing) </LI></UL></LI></UL></DD></DL>
      <DL>
        <DT><B>Memory</B> 
        <DD>
        <UL>
          <LI>
          <TABLE bgColor=#ffff00 border=1>
            <TBODY>
            <TR>
              <TD>Computer memory is expected to be 32 MegaBytes of <A 
                title="what is DRAM?" href="http://pcguide.com/ref/ram/tech.htm" 
                target=_blank><EM>SDRAM</EM></A>, 16 of which is the main 
                processor RAM and another 16 Megs accessible by the Video 
                Controller. Memory is no longer fixed at 32MB. The user can 
                install any size of SD-RAM module up to 1 GigaByte. The CPU will 
                have access to this large chunk of memory with a simple banking 
                register which itself is outside the CPU (not a true MMU). For 
                the ROM emulation, some banks are write-once and thereafter 
                read-only</TR></TBODY></TABLE>
          <LI>64K RAM for MonsterSID (DMA Audio or Instrument clips) 
          <LI>The System will have a small <EM>boot ROM</EM> (8-16k) which will 
          handle power-on initialization 
          <LI>Main OS storage will be via a <A title="about compact flash" 
          href="http://www.compactflash.org/" 
          target=_blank><EM>Compact&nbsp;Flash</EM></A> media interface with 
          card which is designed to hold the C-One's operating system(s) as well 
          as other data. There is no limit to card capacity (current Flash Cards 
          contain up to 512 MB memory) Flash media is <A 
          title="define hot plugging" 
          href="http://www.webopedia.com/TERM/h/hot_plugging.html" 
          target=_blank>hot&nbsp;swappable</A> </LI></UL></DD></DL>
      <DL>
        <DT><B>Internal I/O</B> 
        <DD>
        <UL>
          <LI>3.5&#8243; floppy drive connector with 1581 emulation (using PC drive) 
          with 64k RAM 
          <UL>
            <LI><A 
            href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#overnotes">Capable 
            **</A> of supporting <A title="define MFM" 
            href="http://webopedia.com/TERM/M/MFM.html" target=_blank>MFM</A> 
            720/1.4/2.8 capacity <A title="about floppy drives" 
            href="http://webopedia.com/TERM/F/floppy_disk.html" 
            target=_blank>floppy&nbsp;drives</A> via software, <A 
            title="help WD1772" 
            href="http://chimo.unimo.it/~vezz/atari/hardware/docs.html" 
            target=_blank>WD1772</A> compatible</LI></UL>
          <LI><A title="about IDE" 
          href="http://pcguide.com/ref/hdd/if/ide/index.htm" 
          target=_blank>IDE</A> Interface with DMA support <A 
          href="http://www.geocities.com/profdredd/commodoreone/cmdrone.html#overnotes">**</A> 

          <LI>Compact Flash Media Slot (see 'Memory' above) 
          <LI>LCD Interface (TTL LCD style) </LI></UL></DD></DL>
      <DL>
        <DT><B>Internal Expansion</B> 
        <DD>
        <UL>
          <LI>C-64 compatible Cartridge Slot 
          <LI>Up to two <A title="define PCI" 
          href="http://webopedia.com/TERM/P/PCI.html" target=_blank>PCI</A> 
          connectors (factory-stuffed only one) 
          <LI>Capability to configure C1 system chip settings externally 
          <LI>Two Amiga 1200 compatible <EM>clock-ports</EM> for expansion 
        </LI></UL></DD></DL>
      <DL>
        <DT><B>External Interfacing</B> 
        <DD>
        <UL>
          <LI>PS/2 Keyboard port with either Commodore-64 matrix emulation 
          (configurable) or raw data access 
          <LI>PS/2 Mouse with 1351 emulation and bi-directional communication 
          support 
          <LI>IEC Serial Connector supporting Commodore VIC/64/264/128 drives 
          and printers 
          <LI>2 Joystick Ports (Paddles supported with classic SID chips 
          installed) 
          <UL>
            <LI>Joystick lines can also be emulated via keyboard</LI></UL>
          <LI>Centronix Parallel port - can act as C-64 User Port with adapter 
          <LI>Geek Port (whatever spare lines are left) </LI></UL></DD></DL><A 
      name=overnotes>
      <DL></A>
        <DT><B>* About the Copper</B> 
        <DD>The Copper processor is designed to make adjustments to the video 
        chip <STRONG>on the fly</STRONG>. As the video chip draws the screen the 
        copper can be set to activate at specific pixel locations - upon 
        activation it can modify the video registers with new values. This is 
        how split screen, layered screen and/or mixed video effects are so easy 
        on the Amiga. The Copper command list has three commands: 
        <UL>
          <LI><EM>Wait for Raster Value</EM> 
          <LI><EM>Skip Function if Event</EM> 
          <LI><EM>Store Value to Register</EM> </LI></UL>
        <DT><B>** Floppy/IDE Interface</B> 
        <DD>In the initial release these interfaces will not have any support 
        software (with the exception of 1581 emulation), it is hoped that with 
        the ease of interfacing to the floppy and IDE drives a more 
        <STRONG>software oriented individual</STRONG> will develop the necessary 
        support software for these devices </DD></DL></TR></TBODY></TABLE>
<HR width="50%">
<A name=general></A>
<H2>General Information</H2>
<TABLE bgColor=#00ffff border=1>
  <TBODY>
  <TR>
    <TD>
      <H3>Keyboard Decoder Look Up Table (LUT) Programming Instructions</H3>
      <UL>
        <LI>Remember Pause key doesn't repeat 
        <LI>The restore key needs to be defined and will not be user changeable 
        since it is hardwired and not scanned by Row/Col strobes 
        <LI>Key map LUT is 256 bytes long 
        <LI>Non-extended scan codes are directly addressed from location 0 - 127 
        (0xxxxxxx LSB) 
        <LI>Extended and shifted scan codes are addressable at scan code + 128 
        (1xxxxxxx LSB) 
        <LI>Numeric Keypad keys map to the extended keys when shift is depressed 
        (i.e. 7 = home, 9 = page up...) 
        <LI>Some extended keys have multiple scan codes and if two entries into 
        the matrix are not needed then all scan codes need to point to the same 
        matrix location. The SHIFT scan code generated when num lock on is now 
        blocked on all extended keys (you may still manually shift or force 
        shift these keys) 
        <LI>Left and right shift keys must be mapped in both shifted and 
        non-shifted halves of the LUT to these locations or lock ups will happen 

        <UL>
          <LI>Row(7) col(1) for left
          <LI>Row(6) col(4) for Right</LI></UL></LI></UL>
      <H4>LUT data needs to be arranged</H4>
      <DL>
        <DT><B>Bits 7-6</B> 
        <DD>
        <UL>
          <LI>"00" - Normal operation to 8x8 matrix 
          <LI>"01" - Extended matrix operation (d02f bits 0-2, joy 1,2) 
          <LI>"10" - Block shift 
          <LI>"11" - Force Shift </LI></UL>
        <DT><B>Bits 5-3 Column select</B> 
        <DD>
        <UL>
          <LI>8X8 matrix operations 
          <UL>
            <LI>Column of bit to set on key press</LI></UL>
          <LI>Extended 
          <UL>
            <LI>"000" - "010" (d02f extended column scan) 
            <LI>"011" - Joy 1 
            <LI>"100" - Joy 2 </LI></UL></LI></UL>
        <DT><B>Bits 2-0 Row Select</B> 
        <DD>
        <UL>
          <LI>8x8 matrix operation 
          <UL>
            <LI>Row of bit to be set on key press</LI></UL>
          <LI>Extended 
          <UL>
            <LI>"000" - "111" (d02f extended row scan)</LI></UL>
          <LI>Joy Mode 
          <UL>
            <LI>Bit 0 - Joy 0 
            <LI>Bit 1 - Joy 1 
            <LI>Bit 2 - Joy 2 
            <LI>Bit 3 - Joy 3 
            <LI>Bit 4 - button1 
            <LI>Bit 5 - button2 
            <LI>Bit 6 - button3 
            <LI>Bit 7 - button4 </LI></UL></LI></UL></DD></DL>
      <P>To set a bit in the 8x8 matrix, assign a row and column in the LUT that 
      corresponds to the keyboards scan code. You can disable the shift keys 
      when you want to map a character to an un-shifted location with the block 
      shift command. Mapping an un-shifted character to a shifted location 
      requires the uses of the force shift command. The block and force shifts 
      can only be used in the 8x8 matrix. When in the extended matrix command 
      you can set bits in the d02f extended columns and the joystick bits 
  </P></TR></TBODY></TABLE>
<TABLE borderColor=#0099ff bgColor=#0099ff border=1>
  <CAPTION>Examples</CAPTION>
  <TBODY>
  <TR>
    <TH align=left>LUT address (hex)
    <TH bgColor=#3366ff colSpan=3>Bits 
  <TR>
    <TH align=left>Un-shifted = scan code
    <TH bgColor=#3366ff>7-6
    <TH bgColor=#3366ff>5-3
    <TH bgColor=#3366ff>2-0 
  <TR>
    <TH align=left>Shifted = scan code + 128
    <TH bgColor=#3366ff>Command
    <TH bgColor=#3366ff>Column
    <TH bgColor=#3366ff>Row 
  <TR bgColor=#66ccff>
    <TD colSpan=4>Map un-shifted key 'A' to the matrix location for 'A' 
  <TR bgColor=#66ccff>
    <TD>1C
    <TD>00
    <TD>001
    <TD>010 
  <TR>
    <TD colSpan=4>Map shifted key 'A' to the matrix location for shift 'A' (no 
      need to force a shift here if a shifted key 'A' is desired) 
  <TR>
    <TD>9C
    <TD>00
    <TD>001
    <TD>010 
  <TR bgColor=#66ccff>
    <TD colSpan=4>Map shifted 'quote' key to matrix location for shift '@' 
      (still no need to force shift because its still a shifted key) 
  <TR bgColor=#66ccff>
    <TD>D2
    <TD>00
    <TD>111
    <TD>011 
  <TR>
    <TD colSpan=4>Map shifted '+' key to un-shifted matrix location for '+' 
      (the shift key bit is present on the matrix and must be blocked to cross 
      this key over to the un-shifted side also notice that by blocking the 
      shift we still need to map from the shifted half of the LUT) 
  <TR>
    <TD>D5
    <TD>10
    <TD>101
    <TD>000 
  <TR bgColor=#66ccff>
    <TD colSpan=4>Map un-shifted ';' key to shifted matrix location for '=' 
      (the shift bit must be forced onto the matrix for this crossing and does 
      not change which half of the LUT we map from) 
  <TR bgColor=#66ccff>
    <TD>4C
    <TD>11
    <TD>110
    <TD>101 
  <TR>
    <TD colSpan=4>Map un-shifted 'Z' key to joy1 button1 (must set command to 
      extended column to access joysticks) 
  <TR>
    <TD>1C
    <TD>01
    <TD>011
    <TD>100 
  <TR bgColor=#66ccff>
    <TD colSpan=4>Map un-shifted 'F9' key to extended matrix col(0) row(1) 
  <TR bgColor=#66ccff>
    <TD>0A
    <TD>01
    <TD>000
    <TD>001 </TR></TBODY></TABLE>
<HR width="50%">

<H2>Q and A</H2>
<H3>General Questions</H3><CITE>Is C-One an expansion cartridge for my 
C-64/128?</CITE> 
<BLOCKQUOTE>No, C-One is an entirely new computing platform designed from 
  scratch with a C-64 at it's heart</BLOCKQUOTE><CITE>What kind of PC do I need to 
use C-One?</CITE> 
<BLOCKQUOTE>None at all. C-One is not an emulator nor is it an accessory for a 
  PC. It is an entirely new computing platform designed from scratch with a C-64 
  at it's heart</BLOCKQUOTE><CITE>I would like to know if the emulation of the C64 
is real (ie hardware level) or software emulation (like the emulators for pc 
etc)?</CITE> 
<BLOCKQUOTE>Good question! The C-One is an entirely new computer. Jeri has 
  incorporated all the functions of a C-64 into her own hardware. No software 
  emulation is involved here. This project has been made possible by recent 
  advances in programmable logic chips</BLOCKQUOTE><CITE>What software in my 
current collection will run on C-One?</CITE> 
<BLOCKQUOTE>Hopefully a large percentage of existing C-64 software will run on 
  C-One. Because C-One will use a 65816 processor, I expect compatibility to be 
  similar to that of the SuperCPU (probably a little better.) Many programs have 
  already been patched for 65816 compatibility and high-speed operation. For 
  more info, see <A title="65816 programs" href="http://come.to/supercpu" 
  target=_blank>The&nbsp;SuperCPU&nbsp;Home</A></BLOCKQUOTE>
<TABLE bgColor=#ffff00 border=1>
  <TBODY>
  <TR>
    <TD><CITE>How C-64 compatible will C-One really be?</CITE> 
      <BLOCKQUOTE>Effort is being made to keep it as compatible as possible 
        without sacrificing the new goodies. The C-One mode with MonsterSID and 
        SuperVIC will still be C64 compatible but not 100%. If you have really 
        tricky games, demos or other stuff that goes wild on the IO registers, 
        it might not work on the C-One core. In such a case, you just choose a 
        different core on power-up. Indeed, even after the C-One boards have 
        shipped compatibility refinements and bug-fixing will continue being 
        worked on and updates to be made</BLOCKQUOTE><CITE>When updates are 
      available how will my C-One get updated?</CITE> 
      <BLOCKQUOTE>That's the beauty of C-One, the updates will be made with 
        software. In the past computer updates were made by replacing chips on 
        the motherboard, as Commodore replaced VIC-II and KERNAL chips when bugs 
        were fixed. With C-One we can distribute updates to our users via 
        internet download or on disk. You'll be able to make the updates 
        yourself through the software interface</BLOCKQUOTE><CITE>The original C64 
      had very predictable timing, e.g. cycles per line depending on number of 
      shown spites. Will the C-One be able to emulate this timing 
      perfectly?</CITE> 
      <BLOCKQUOTE>The timing relations between the CPU and the display will 
        not be affected. Please note that the <B>C-One DOES NOT EMULATE</B>, it 
        really clones the hardware. C-One has a <EM>flickerfixer</EM> (hardware 
        unit that generates a VGA compatible picture), and today's monitors are 
        made to sync to varying frequencies. The part <EM>not emulating, but 
        cloning</EM> even results in an internal pixel clock of 8 Mhz, which is 
        used to transport data from the SuperVIC to the 
  flickerfixer</BLOCKQUOTE></TR></TBODY></TABLE><CITE>Will C-One have a cassette 
port for my tape drive? I wanna run my old games on tapes!</CITE> 
<BLOCKQUOTE>No but it should be possible to build an interface to connect C-64 
  compatible tape drives. Currently it is thought that this interface would 
  connect to the "Geek Port" but it is not yet defined</BLOCKQUOTE><CITE>Will the 
Cassette control lines still be available at $0001?</CITE> 
<BLOCKQUOTE>The addresses $0000 and $0001 will float on the lines normally 
  used for cassette. This means that a person could make an address decoder for 
  this location and register the data lines used for 
cassette</BLOCKQUOTE><CITE>Will the [RS-232 port] be a user port connection or a 
real <A title="define COM port" href="http://webopedia.com/TERM/C/COM.html" 
target=_blank>COM&nbsp;port</A>? Will it have a real <A title="help ACIA" 
href="http://members.lycos.co.uk/leeedavison/6502/acia/" 
target=_blank>6551&nbsp;ACIA</A> driving it, like SwiftLink-style?</CITE> 
<BLOCKQUOTE>The RS-232 serial port will be replaced by two <A 
  title="about Clock Port" 
  href="http://www.ntrautanen.fi/computers/hardware/misc/a1200_clock.htm" 
  target=_blank>Amiga 1200 compatible <EM>clock port</EM> connectors</A>, 
  because the Silversurfer serial port for the Amiga computer is exactly this. 
  Since it is produced in high quantities, it's cheaper to use that instead of 
  buying new 16c550 UARTs. Plus, it gives you the opportunity to use Amiga 
  add-ons that go on that port. The clock-port is polled I/O only. The two 
  clockports are pin-per-pin equal, like a pass-through. This is to make it 
  compatible with one clock module and one serial port</BLOCKQUOTE><CITE>What 
kinds of devices are supported by the joystick ports?</CITE> 
<BLOCKQUOTE>Digital joysticks (Atari-type) and devices compatible with digital 
  joysticks will work.</BLOCKQUOTE><CITE>Can the joystick ports be used to drive 
miscellaneous digital I/O devices?</CITE> 
<BLOCKQUOTE>The lines on the joystick ports are <B>input-only</B>, so they 
  cannot be used for anything other than joysticks and other <B>input</B> 
  devices that also work on the C64</BLOCKQUOTE><CITE><A 
title="Read more about light pens" 
href="http://www.geocities.com/profdredd/ctricksntips/ctricksntips.html#lightpen" 
target=_blank>Light pens and light guns</A> are digital input devices. Will they 
work?</CITE> 
<BLOCKQUOTE>I ran the LP line over to the 1k30 just in case we wanted to do a 
  light pen. It may be a little tricky since the VGA output isn't necessarily 
  synced with the VIC in the 1k100</BLOCKQUOTE><CITE>What about game paddles and 
other analog input devices?</CITE> 
<BLOCKQUOTE>The C-One has both real SID sockets wired to the joystick ports. 
  The analog inputs for game paddles are only available with classic SID chip 
  installed</BLOCKQUOTE><CITE>What about the <ACRONYM 
title="Time Of Day"><EM>TOD</EM></ACRONYM> clock?</CITE> 
<BLOCKQUOTE>Yes, it will have the TOD...</BLOCKQUOTE><CITE>How much memory can 
the CPU actually address?</CITE> 
<BLOCKQUOTE>The 65816 itself has a 24-bit address space (16 MegaBytes). From a 
  programming perspective it functions more like a 16-bit address bus with an 
  8-bit extension tacked on. That way the 65816 can directly execute classic 
  6502 code without modification inside 64 KiloByte banks</BLOCKQUOTE><CITE>How 
does the 16MB bank switching scheme work?</CITE> 
<BLOCKQUOTE>I haven't defined the banking yet. I can't bank it all at once or 
  you will lose zero page so I may bank only the upper 8 megs or something. It 
  will have a simple banking system at first. Later we can look into the 
  possibility of a real <A title="Memory Management Unit" 
  href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=mmu">MMU</A></BLOCKQUOTE><CITE>The 
original C-64 expansion port does not offer us the top 8 address lines that a 
65816 can ordinarily access. How can we access 24-bit addresses on the C-One 
expansion port?</CITE> 
<BLOCKQUOTE>The upper 8 bits of the address is time multiplexed and can be 
  captured on the cartridge port with a D type latch (74ls373)</BLOCKQUOTE>
<TABLE bgColor=#ffff00 border=1>
  <TBODY>
  <TR>
    <TD><CITE>What kind of memory should I use in C-One? How many slots are on 
      C-One mobo?</CITE> 
      <BLOCKQUOTE>Use the fastest SIMM module you can find (smallest 
        <EM>ns</EM> number) (Fast page or EDO, EDO preferred). You can tell the 
        speed by looking at the chips on the module, e.g.: sn14411441 
        <EM><B>-60</B></EM> is 60 ns DRAM. The c-One uses a 5v power supply for 
        the SIMM, but the FPGA inputs are tolerant for either 5v or 3.3v. 5v 
        SIMMS are recommended because 3.3v ones might get too hot. There is one 
        DIMM socket which supports 66, 100 and 133 MHz SDRAM modules. DIMMS must 
        be 3.3v (5v's don't fit the socket).</BLOCKQUOTE><CITE>What is the MM 
      Memory?</CITE> 
      <BLOCKQUOTE>Video memory and CPU memory are still in the same memory 
        module, but for higher resolutions, this would mean a slowdown for the 
        processor. To get around this, there is a framebuffer that is only 
        updated if the VIC (or other cloned display chip) updates the screen. 
        This framebuffer has it's own strip of memory in a SIMM socket. Since 
        the memory on that module is not restricted to graphics, but music can 
        also be stored any played back without CPU usage, we call this the 
        <B>MultiMedia Memory</B><BR><BR>The CPU fetches from SDRAM and the 
        SuperVIC also fetches from SDRAM. The SuperVIC outputs a stream of RGB 
        values that are stored into the MM memory. The scan converter/buffer 
        reads the RGB values and displays them at higher VGA scanrates. This 
        system allows any VIC timing (pal/ntsc) to be displayed on any standard 
        VGA monitor. For higher resolutions we can choose the rate the RGB data 
        is streamed from the VIC. For example we could maintain the 8mhz VIC 
        rate and take longer to update each frame or speed up the VIC for faster 
        updates. Another feature is suspending the VIC updates and displaying 
        the last contents of the frame buffer when more CPU cycles are 
        needed<BR><BR>The MM memory (Multi-Media memory) is any standard 72-pin 
        SIMM, parity or non-parity of 60 nano-seconds or more. I think it should 
        be a minimum of 4 Megbytes. The maximum size for the multimedia memory 
        is 128MB. It can be accessed by <B>DMA only</B> (ie you can't execute 
        system programs in it.) The 6502 core excutes code for disk access here. 
        SID and 6502 can access it only. The scan-doubler uses it, but the 
        SuperVIC gets it's data from system memory (SDRAM) 
</BLOCKQUOTE></TR></TBODY></TABLE><CITE>Will C-One work with Commodore and CMD 
disk drives?</CITE> 
<BLOCKQUOTE>I have tested the prototype with many of the CBM, CMD peripherals 
  and various fast loaders and it seems to work well</BLOCKQUOTE><CITE>Can the 
3.5&#8243; drive read and write <A title="Multiple Frequency Modulation" 
href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=mfm">MFM-encoded</A> 
(PC format) floppies?</CITE> 
<BLOCKQUOTE>I've built a MFM encoder and decoder that can write at 1.44 data 
  rates. It can read sectors, write sectors, read tracks, write tracks, perform 
  the checksums and seek a track. I've been working on a 6502 core (minus BCD) 
  that has built in opcodes for IDE and floppy, but the biggest problem is that 
  there is no software written yet</BLOCKQUOTE><CITE>Can C-One DMA to/from an IDE 
drive?</CITE> 
<BLOCKQUOTE>The C-One can DMA from floppy, IDE and compact flash directly to 
  memory which is much faster than a polled system, but the <A 
  title="Programmed Input/Output" href="http://webopedia.com/TERM/P/PIO.html" 
  target=_blank>PIO&nbsp;registers</A> are also available</BLOCKQUOTE><CITE>Will 
the C-One have special DOS for the hard disk filesystem?</CITE> 
<BLOCKQUOTE>This will be up to the programmers. I'm just authoring the 
  hardware at this point</BLOCKQUOTE><CITE>If you have a <EM>Commodore 64 
core</EM> installed in your C-One, how are you supposed to access harddisks, 
CD-ROMs and other <EM>non-tape/floppy</EM> kinds of media?</CITE> 
<BLOCKQUOTE>At first: Not at all. The drivers are not available, but they are 
  being worked on. The first thing will be the 1581 emulation, so you can use a 
  cheap 1.44M drive as a 1581 drive from the C64 side. The next step after that 
  will be handling .d81 images on harddisk or compact flash media that is FAT16 
  or FAT32 formatted, so they are easily interchanged with PCs. A third step 
  after that could be the implementation of a <EM>bigger filesystem</EM> - 
  anything is possible, the system is re-configurable without having to open the 
  computer, and you can update by downloading cores from the 
internet</BLOCKQUOTE><CITE>How large of a hard drive is supported?</CITE> 
<BLOCKQUOTE>Not yet defined. At this time I don't think the hardware puts any 
  limit on IDE disk capacity. It will depend entirely upon the IDE filesystem 
  developed by the software people</BLOCKQUOTE><CITE>Will the C1 have a 
calendar/clock like PCs? This would be cool...</CITE> 
<BLOCKQUOTE>RTC is expensive, because it's not only the chip, but also the 
  batteries, charging circuit and stuff. Of course it's <B>only a few dollars 
  more</B>, but since we have the clock-ports, there's a perfect place to add an 
  RTC for those who want to run OSes that require one</BLOCKQUOTE><CITE>What's 
this I hear about a 6510 being used as a second processor?</CITE> 
<BLOCKQUOTE>I've added a port that a cpu card will plug into on the new 
  revision and someone can plug a 6809, 6502 or what ever into it. The CPU card 
  will be able to carry the 65816, 6502, 65C02, Z80 and 6809. This will enable 
  the C-One to act like nearly any computer of the 80s just by exchanging the 
  CPU card and the program in the CF card. And yes, the 6510 ports are 
  simulated, and yes, it's possible to add interfaces on the CPU card. The slot 
  will be documented, so third party companies can produce hardware for 
it</BLOCKQUOTE><CITE>Will there be versions of C-One for other cassic computer 
systems besides the C-64?</CITE> 
<BLOCKQUOTE>The FPGA can be re-configured with a different program in the 
  CompactFlash card. As soon as there's time and the need for a faster bus (for 
  example a 2nd source vendor wanting to add some features to an existing 
  design), this <B>will</B> be done. I'm really looking forward to playing Atari 
  2600 games on it, and to turn it into my first machine ever, the Sinclair 
  ZX-81. For instance, Jeri said that she had produced a version that makes the 
  board a VIC-20</BLOCKQUOTE><CITE>Can I put multiple system cores (eg VIC-20, 
PET/CBM, +4/C16/C116) on the same CF card as the C64 cores? How can I choose one 
of them at boot time?</CITE> 
<BLOCKQUOTE>Yes. Currently the early startup gives you the choice of up to ten 
  cores that are selected with the numbers 0 to 9 on the PS/2 keyboard. The CF 
  card must be FAT16 or FAT32 formatted, and the core files must be in a 
  directory called <CODE>BOOT</CODE>. ROM files are also located as straight 
  binary files on the CF card or harddisk</BLOCKQUOTE><CITE>What prevents a rogue 
program from re-configuring the hardware against my will?</CITE> 
<BLOCKQUOTE>The early startup flash ROM has a write protect jumper so the 
  machine will never be accidentally rendered <B>brain 
dead</B></BLOCKQUOTE><CITE>Does this mean we can expect C-128 support with BASIC 
7.0?</CITE> 
<BLOCKQUOTE>C128 is a double-processor design. This will presumably not work 
  with the current concept of the C-One</BLOCKQUOTE><CITE>Is the C-One mainboard 
fully micro-ATX compliant?</CITE> 
<BLOCKQUOTE>It's a midi-sized board, not micro. Four slots are occupied, where 
  full-size uses five, and micro uses three (the one thing that's important is 
  four slots). The dimensions are 10.58 x 7.38 x 1.5 inches (about 270 x 190 
  mm), so it is definately not micro-ATX size and the case needs 4 expansion 
  slots. The board will not change more than a 1/4 inch in any direction. 
  MicroATX is defined to be 9.6 x 9.6 inches, so the C-One is <B>in between</B> 
  a full ATX board (9.6 by 12 inches) and microATX, because it uses four slots. 
  To be safe we should say that it requires a standard ATX case. There must be 
  space for C-64 cartridge slot and the clock port expansions that will point 
  down from the clock port.</BLOCKQUOTE><CITE>Are there any plans to shrink the 
motherboard to fit the <EM>Mini-ATX form factor</EM> standard? I'd like a small, 
slick desktop case placed underneath my monitor</CITE> 
<BLOCKQUOTE>No chance to go any smaller. The board is exactly one slot wider 
  than mini-ATX, so it should fit in more cases than normal ATX sized 
boards</BLOCKQUOTE><CITE>Would the C-One fit in a laptop case? Would it 
work?</CITE> 
<BLOCKQUOTE>The C-One is a low-power design. The most power consuming parts 
  are the memory modules and (if installed) legacy CPUs. I have two contacts to 
  Asian manufacturers who supply "cases only", that means case, keyboard and 
  display (don't know about batteries and PSUs). The board will not fit in those 
  cases because of all the connectors standing way too high above the PCB. We 
  have a high-standoff DB25 printer port, a double-stack PS/2, and 90 degree 
  memory module slots. A C-One Laptop would be a different PCB, and I doubt that 
  it will have the same specifications due to lack of space (volume and 
  backpanel). Let this be our goal for 2004 :-)</BLOCKQUOTE><CITE>How many PCI 
slots are there?</CITE> 
<BLOCKQUOTE>The initial plan was to have a single PCI slot for networking. 
  Space allowed us to have a second one, but the order to the Asian supplier was 
  already processed, so we have to deal with what we have, and that's one PCI 
  slot per board. Currently there is only one PCI slot but provisions will be 
  made for a second PCI connector to be added. Soldering on the board should 
  only be done by educated, experienced persons</BLOCKQUOTE><CITE>What kinds of 
cards will work in the PCI slot(s)?</CITE> 
<BLOCKQUOTE>The reason for the PCI slot(s) is to satisfy the desire for 
  networking, and all networking cards fit perfectly. If you want to connect 
  special things, a riser card may help</BLOCKQUOTE><CITE>I hope the PCI slot will 
support <A title="define bus-mastering" 
href="http://webopedia.com/TERM/b/bus_mastering.html" 
target=_blank>bus-mastering</A>, otherwise I can't use it for my <A 
title="Full 32-bit processor!" 
href="http://www.gideonz.dds.nl/">processor</A></CITE> 
<BLOCKQUOTE>The PCI slot does support bus mastering (In theory), but it still 
  needs to be tested</BLOCKQUOTE>
<TABLE bgColor=#ffff00 border=1>
  <TBODY>
  <TR>
    <TD><CITE>PCI is supposed to be a 32-bit bus but 65816 is not a 32-bit 
      processor. How does C-One interface with the 32-bit bus?</CITE> 
      <BLOCKQUOTE>Yes, PCI is a 32-bit bus. PCI can DMA to the SDRAM by Bus 
        Mastering. The PCI to SDRAM path is necked down to 16-bit x 60mhz but 
        that is still transparent to the PCI. It will be stalled every fourth 
        longword so the new column can be opened on the SDRAM. Delays would be 
        no problem since a standard PC would do it in regular intervals anyway. 
        The path from PCI to MM memory is 
32-bit</BLOCKQUOTE></TR></TBODY></TABLE><CITE>How can I access the Compact Flash 
card when the board is inside an ATX case? Even if I open the ATX case it looks 
like the CF slot may be blocked by the 5.25 drive bays?</CITE> 
<BLOCKQUOTE>The CF slot can be jumpered as <B>Master</B> or <B>Slave</B> on 
  the <EM>Secondary IDE Channel</EM>. If you need access to the CF slot from the 
  outside then there are <A title="Compact Flash Adaptor" 
  href="http://www.abiatech.com/fb4617.htm" target=_blank>ATA-to-CF adaptors</A> 
  which can be connected to a <A 
  title="IIA - IDE Interface ATA Flash Card Reader" 
  href="http://www.carry.com.tw/products/IDE/iia.htm" target=_blank>ATA CF Card 
  Reader</A> installed in a 3.5 drive bay of your case. The C-One's CF card slot 
  can be used either as <B>Secondary</B> slot (if jumpered properly), or you can 
  still use three IDE/ATA devices by leaving the internal CF slot empty. So yes, 
  you can end up with two functioning CF card slots, but this reduces the number 
  of IDE/ATA devices to two</BLOCKQUOTE>
<HR width="50%">

<H2>Copper Images and Memory Setup</H2>
<TABLE bgColor=#00ffff border=1>
  <TBODY>
  <TR>
    <TD>
      <H3>Making a memory image for startup and using the copper to configure 
      registers</H3>
      <UL>
        <LI>On start up the C-One loads the configuration data into the <A 
        title="define FPGA" 
        href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=fpga" 
        target=_blank>FPGA</A> from the compact flash which tells the C-One what 
        its hardware is supposed to mimic (c64 register set) 
        <LI>Next the C-One checks for a depressed key. If depressed (the key 
        not you) check LUT for location in the Compact Flash to DMA Memory image 
        and Copper list 
        <LI>When finished with DMA then the Copper is triggered to load 
        registers preset </LI></UL>
      <H3>Example Copper list</H3><CODE>Start: Set Register select command 
      $FF<BR>Value Bit(7 downto 0) (VIC, SID, CIA1/CIA2* , KeyLut1, KeyLut2, 
      Red, Green, Blue)<BR>Store Command 
      $FE<BR>Address<BR>Value<BR>Address<BR>Value<BR>Address<BR>Value<BR>Address<BR>Value<BR>Address 
      &lt;= CPU reset control register $d030<BR>Value &lt;= Release CPUs reset 
      line command1 $55<BR>Address &lt;= CPU reset control register 
      $d030<BR>Value &lt;= Release CPUs reset line command2 $AA &lt;= released 
      at this point<BR>Wait command $FD<BR><BR>*CIA 2 selected with bit 7 of 
      address byte<BR></CODE>
      <P>The memory image should have the reset vector set to the entry point of 
      the program </P>
      <H3>C-Ones memory map for startup</H3><CODE>0: 0000 =&gt; FFFF RAM<BR>1: 
      0000 =&gt; 1FFF Kernal<BR>1: 2000 =&gt; 3FFF Basic<BR>1: 6000 =&gt; 61FF 
      Character ROM<BR>1: 7000 =&gt; Start of Copper 
list<BR></CODE></TR></TBODY></TABLE>
<HR width="50%">
<A name=monstersid></A>
<H2>MonsterSID Data</H2>
<TABLE bgColor=#00ffff border=1>
  <TBODY>
  <TR>
    <TD>
      <H3>Programming MonsterSID DMA</H3>
      <P>This is a very early draft of how the MonsterSID DMA is programmed and 
      will <STRONG>definitely</STRONG> change before the C-Ones release </P>
      <DL>
        <DT><B>DMA</B> 
        <DD>DMA is an acronym for <A title="about DMA" 
        href="http://www.pcguide.com/ref/mbsys/res/dma/index.htm" 
        target=_blank><EM>Direct&nbsp;Memory&nbsp;Access</EM></A> and is a 
        method of automatically fetching data from memory without the CPU 
        intervention. The M-SID has 8 DMA channels the can function 
        simultaneously. Four directed to the right channel and four to the left. 
        They merge with the channels in front of the filters and volume control, 
        but do not in front of the envelope generators </DD></DL>
      <DL>
        <DT><B>Resolution</B> 
        <DD>In the current prototype Im experimenting with a dual channel 
        16-bit <A title="define DAC" href="http://webopedia.com/TERM/D/DAC.html" 
        target=_blank>digital-to-analog&nbsp;converter&nbsp;(DAC)</A>, but this 
        may drop to 12 depending on the overall machines cost </DD></DL>
      <DL>
        <DT><B>Pre-scaling</B> 
        <DD>The DMA fetches are derived from a 2MHz tick and are pre-scaled with 
        a 16-bit value. This 16-bit value is used to control the sample playback 
        speed and is independent between channels </DD></DL>
      <H4>Modes</H4>
      <DL>The DMA controller also has two modes of operation 
        <DT><EM>One-shot</EM> 
        <DD>In one-shot mode the DMA is triggered from a source and played until 
        it encounters the value FF in the sample data then stops 
        <DT><EM>Continuous</EM> 
        <DD>In continuous mode the DMA controller restarts when it encounters 
        value FF in the sample data </DD></DL>
      <DL>
        <DT><B>Start Position</B> 
        <DD>Each DMA channel has a 16-bit start value to indicate the beginning 
        of the sample </DD></DL>
      <DL>
        <DT><B>Memory</B> 
        <DD>The M-SID has 64k of non-shared memory. The memory access registers 
        are low address byte, high address byte and data byte. Every time the 
        low address register is written the MonsterSID will write the contents 
        of the data into its memory </DD></DL>
      <DL>
        <DT><B>Sync and Ring</B> 
        <DD>The DMA Channels can be sync and ring modulated from the waveform 
        generators and the waveform generators can be sync and ring modulated 
        from the DMA channels </DD></DL>
      <P>The new SID has ports directly to the L/R DAC's so you won't need to 
      use the volume register to play digitized samples. The DMA controller 
      should be considered when coding the new SAM because all you need to write 
      is an speed register, upper memory byte and lower byte. Every time you 
      write a value to the lower byte it starts the DMA running until it reaches 
      0 in the data or if in continuous mode it loops at the 0 </P>
      <P>This is what the MonsterSID can do now, but I have a lot of fun 
      features I want to add to the MonsterSID before I ship the C-One! 
  </P></TR></TBODY></TABLE>
<H3>MonsterSID Q and A</H3><CITE>On my own C-64 boards, 6581 uses 470 pico-Farad 
filter capacitors and 8580 uses 22 nano-Farad filter capacitors. Which type is 
implemented on MonsterSID?</CITE> 
<BLOCKQUOTE>I was planning on having both values avalable with a 
jumper</BLOCKQUOTE><CITE>How is sound output provided on C-One?</CITE> 
<BLOCKQUOTE>The two RCA connectors can be connected to your home stereo 
  system. You may use standard PC speakers with the appropriate 
adaptor</BLOCKQUOTE><CITE>How many filters will the MonsterSID have?</CITE> 
<BLOCKQUOTE>Two, Left/Right</BLOCKQUOTE><CITE>Can the 8 DMA voices and 16 SID 
voices be used simultaneously?</CITE> 
<BLOCKQUOTE>Yes, 4 left, 4 right, no envelope control and only left/right 
  volume control shared with voices</BLOCKQUOTE><CITE>I'm wondering if I could ask 
you a bit more about the "MonsterSID"? What sort of frequency range or response 
does it have? Is it the same as the original? How high can it go???</CITE> 
<BLOCKQUOTE>It's exactly the same freq range as the 
original</BLOCKQUOTE><CITE>Can the volume control still play digis?</CITE> 
<BLOCKQUOTE>Yes, the vol control can still play digis</BLOCKQUOTE><CITE>I 
suppose its obvious that the DMA will be used for waveform generation, what sort 
of output can it generate, 4, 8 or 16 bit? Are all 16 voices the same as the 
original, with the four shapes? Can you use the voices (pulse) or the filters to 
produce samples like the original?</CITE> 
<BLOCKQUOTE>(4) 8-bit DMA channels that access a small 64 KiloByte <A 
  title="define Static RAM" href="http://webopedia.com/TERM/S/SRAM.html" 
  target=_blank>SRAM</A>. The sync and ring can be redirected to multiple 
  channels at once and the DMA channels also </BLOCKQUOTE><CITE>How do they work? 
Are there 2 DMA and 8 voices per channel? I suppose there is no stereo-SID 
compatibility? Does using a sample also use a voice? Do all of the DMA share the 
64K?</CITE> 
<BLOCKQUOTE>They have two modes of operation, <EM>Continuous</EM> and 
  <EM>One-shot</EM>. They each have a register for the playback speed and start 
  index register. When the DMA controller encounters a value of 00000000 it will 
  loop or stop. They work with channel 1/2's voice 1/2's ADSR also. It will need 
  a jumper wire attached when used with a real C=64 to decode the mirrors into 
  the new registers</BLOCKQUOTE><CITE>Will the 64 KB sound buffer be mapped into 
the C-One's address space?</CITE> 
<BLOCKQUOTE>No it is accessed similar to the VDC in the 128. (<I>Editor's 
  Note: The C-128 VDC is accessed by writing to a "window-register", which 
  <B>does</B> exist in the C-128 memory map. The VDC RAM is external to the 
  system bus and cannot be accessed directly by the CPU. You write values to the 
  VDC RAM by going through the "window-register"</I></BLOCKQUOTE><CITE>Will 
MonsterSID have "line in" or "microphone" input?</CITE> 
<BLOCKQUOTE>No plans for these at the moment</BLOCKQUOTE><CITE>I remember 
hearing something about defining custom waveforms for the SID voices. Is this a 
planned feature?</CITE> 
<BLOCKQUOTE>The DMA channels can be used to create virtually any shape 
  waveform, but I'm thinking about having adjustible rising and falling edge 
  rates on the waveform generators</BLOCKQUOTE><CITE>8 DMA channels, <A 
title="define MOD" href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=mod" 
target=_blank>playback&nbsp;of&nbsp;MODs</A> should be easy, yes? Are you still 
shooting at 16bit DAC?</CITE> 
<BLOCKQUOTE>Mods should be really easy. It has a 16-bit Sanyo DAC. [For MODs 
  with more than 8 channels] I suppose the Blitter could mix the MODs with the 
  AND miniterm</BLOCKQUOTE><CITE>How would the blitter be of help in audio channel 
mixing?</CITE> 
<BLOCKQUOTE>Couldn't you set channel 1 to one sample and channel two to 
  another and do an <EM>AND</EM> function on them?</BLOCKQUOTE><CITE>Any new 
features in addition to <EM>sync</EM>, <EM>ring modulation</EM>, and filters for 
SID?</CITE> 
<BLOCKQUOTE>The SID has more flexible ring and sync modulation now and can be 
  sync and ring moudlated from the DMA channels. The filters are interesting 
  since they have 5 constants between 127 and -127 which determine the cutoff 
  frequencies. I exposed these to the programmer to adjust, but I haven't tested 
  it yet. I hope this will keep the whiners quiet if it doesn't sound exactly 
  like the original because they can adjust it themselves. The SID's filters can 
  be set with the copper on start up so the settings will always be the way they 
  like them</BLOCKQUOTE>
<HR width="50%">
<A name=supervic></A>
<H2>SuperVIC</H2>
<TABLE bgColor=#00ffff border=1>
  <TBODY>
  <TR>
    <TD>
      <H3>Programming The Color Look Up Tables (CLUTs)</H3>
      <P>The color looks up tables are used for planar and cell video modes to 
      generate a 16-bit RGB color values from an 8-bit addressable table. These 
      8-bit values give you a maximum of 256 colors per screen assuming you 
      dont change the CLUTs during the scan and your video mode can support all 
      8-bit values </P>
      <P>The C-Ones 16-bit color output is 5-bits red, 6-bits green and 5-bits 
      blue color intensity which allows a maximum palette of 65535 color </P>
      <UL>
        <LI>The 5-bit red memory location is at $d100 in bank 0, 256 bytes long 
        and entries should be written (MSB XXXXX000) 
        <LI>The 6-bit green memory location is at $d200 in bank 0, 256 bytes 
        long and entries should be written (MSB XXXXXX00) 
        <LI>The 5-bit blue memory location is at $d300 in bank 0, 256 bytes long 
        and entries should be written (MSB XXXXX000) </LI></UL>
      <TABLE width="50%" align=center border=1>
        <CAPTION>If you would like to send a CLUT default startup to be included 
        with the C-One please use this ASCII format</CAPTION>
        <TBODY>
        <TR>
          <TH colSpan=2>Address
          <TH>Entry 
        <TR>
          <TD>0
          <TD>:
          <TD>01010; 
        <TR>
          <TD>1
          <TD>:
          <TD>10101; 
        <TR>
          <TD>2
          <TD>:
          <TD>00111; 
        <TR>
          <TD colSpan=3>blah blah blah... 
        <TR>
          <TD>FF
          <TD>:
          <TD>01110; </TR></TBODY></TABLE>
      <P>There should be three files Red Green Blue and all 256 entries must 
      have a value </P></TR></TBODY></TABLE>
<H3>SuperVIC FAQ</H3><CITE>I'm not famliar with <A title="amiga graphics" 
href="http://www.nvg.ntnu.no/amiga/amigafaq/AmigaFAQ_15.html#SEC15" 
target=_blank>graphics</A>. Can anybody explain this in "dummy" langauage, 
please?</CITE> 
<BLOCKQUOTE>
  <DL>
    <DT><A title="about planar" 
    href="http://www.nvg.ntnu.no/amiga/amigafaq/AmigaFAQ_16.html#SEC16" 
    target=_blank><EM>Planar</EM></A> 
    <DD>The color information is made up of many monochrome bitmaps stacked on 
    top of each other and the depth of these stacked bitmaps determine the 
    maximum colors on the screen. Example 4 planes = 16 colors. <A 
    href="http://www.amigarealm.com/computing/knowledge/kb53.htm#p" 
    target=_blank><EM>More&nbsp;about&nbsp;Planar&nbsp;Graphics</EM></A> 
    <DT><A title="about chunky" 
    href="http://www.nvg.ntnu.no/amiga/amigafaq/AmigaFAQ_16.html#SEC16" 
    target=_blank><EM>Chunky</EM></A> 
    <DD>Every pixel contains 16 bits of color info. PC-style graphics mode that 
    is very wasteful, but allows every color from the pallette to be used on the 
    same screen. <A 
    href="http://www.amigarealm.com/computing/knowledge/kb53.htm#c" 
    target=_blank><EM>More&nbsp;about&nbsp;Chunky&nbsp;Graphics</EM></A> 
    <DT><A title="define co-processor" 
    href="http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?Amiga" 
    target=_blank><EM>Copper</EM></A> 
    <DD>It stands for CO-ProcEssoR and is just made up of useful graphics 
    opcodes. <A href="http://www.amigarealm.com/computing/knowledge/kb53.htm#c" 
    target=_blank><EM>More&nbsp;about&nbsp;COPpeR</EM></A> 
    <DT><A title="define blitter" 
    href="http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?blitter" 
    target=_blank><EM>Blitter</EM></A> 
    <DD>This is a bit mover circuit that can move blocks of data from on memory 
    location to another while performing <EM>mask</EM> type functions against 
    the data. <A href="http://www.amigarealm.com/computing/knowledge/kb53.htm#b" 
    target=_blank><EM>More&nbsp;about&nbsp;Blitter</EM></A> 
</DD></DL></BLOCKQUOTE><CITE>Can anybody reply to my previous question about how 
would the VIC functions work on the C-One? I'm really worried about this 
:)</CITE> 
<BLOCKQUOTE>The legacy registers are identical to the original VIC-II. To 
  access the extended register you store the magic sequence into a memory 
  location $D02F and all the new registers are mapped $D030 - 
$D3FF</BLOCKQUOTE><CITE>Color Memory for the VIC-II 40-column display is usually 
mapped to $d800-$dbff. Will it be possible to relocate Color Memory?</CITE> 
<BLOCKQUOTE>The color attribute memory can be moved anywhere in a 16 MByte 
  space</BLOCKQUOTE><CITE>What kind of video display do I use with C-One?</CITE> 
<BLOCKQUOTE>C-One requires a VGA/SVGA (PC compatible) monitor. VGA was chosen 
  because it supports more display modes with higher resolution and more 
colors</BLOCKQUOTE><CITE>Can I use my old Commodore monitor (eg 1702 or 1902) or 
TV?</CITE> 
<BLOCKQUOTE>You cannot use a composite monitor or television because the VGA 
  video output of C-One is not compatible with these devices. Might work if you 
  buy one of those VGA/TV converters. (<I>Editor's Note: The ones I've seen have 
  very poor picture</I>)</BLOCKQUOTE><CITE>What about other Commodore 
monitors?</CITE> 
<TABLE bgColor=#ffff00 border=1>
  <TBODY>
  <TR>
    <TD>Well, there is some speculation on that but we don't really know yet. 
      According to Ville Jouppi the Commodore monitors below 
      <STRONG>might</STRONG> work with C-One. More information to come; No 
      guarantees on this yet!<BR>
      <UL>
        <LI>CBM 1403 13 inch VGA 
        <LI>CBM 1407 14 inch VGA Monochrome, 64 grey tones 
        <LI>CBM 1428 14 inch Multi-sync VGA monitor, no sound 
        <LI>CBM 1450 Monochrome BISYNC monitor 
        <LI>CBM 1930 14 inch VGA .31mm dot pitch 
        <LI>CBM 1934 14 inch VGA .39mm dot pitch 
        <LI>CBM 1935-II 14 inch SVGA, .28mm dot pitch, MPR-II low radiation 
        <LI>CBM 1936 14 inch SVGA .28mm dot pitch 
        <LI>CBM 1940 Amiga Multiscan Monitor 
        <LI>CBM 1942 Amiga Multiscan Monitor 
        <LI>CBM 1950 13 inch MultiScan 
        <LI>CBM 1960 13 inch MultiScan </LI></UL></TR></TBODY></TABLE><BR><CITE>Why 
don't you build a VGA/TV converter into C-One?</CITE> 
<BLOCKQUOTE>The VGA to composite converter would be very expensive since the 
  C-One's video timing in some of the modes are out of range of low cost 
  converters. The higher cost converters contain expensive dual port field 
  memories that store an entire frame at a time, then display the data at a 
  lower frame rate. I have to be careful with the adding $$$, since it drives 
  the price up very quickly</BLOCKQUOTE><CITE>Can I use more than one 
monitor?</CITE> 
<BLOCKQUOTE>There are no plans to support multiple 
monitors</BLOCKQUOTE><CITE>Ahem. What about us in PAL-land? This has to be made 
switchable :-)</CITE> 
<BLOCKQUOTE>The video is already switchable between PAL and NTSC and the CPU 
  clock can be set PAL/NTSC. The TOD is updated from the h_sync (60Hz) and will 
  work correctly as it was intended, but what I need to make absolutely sure is 
  that people are not driving the TODs with say 50Hz and setting the 60Hz bit 
  for some reason</BLOCKQUOTE>
<P>It doesn't have a set of registers that you increment for the x,y 
coordinates, but a start address and modulo that the programmer needs calculate 
for any given super bitmap 
<DL>
  <DT>Example: 
  <DD>A chunky super bitmap array that is arranged 2048x1024 pixels located at 
  memory location h1023 and a viewable screen of 320x200. 
  <UL>
    <LI>To calculate the modulo you subtract the horizontal screen size from the 
    data array horizontal size (2048 - 320 = 1728). Now enter this into the 
    modulo register 
    <LI>To place the viewable screen in the upper left corner enter the first 
    memory location of the array (h1023) 
    <LI>To move X pixel to the right just add x pixels to the start location 
    (h1023 + x) 
    <LI>To scroll down by one line add the array size to the start memory 
  </LI></UL></DD></DL><BR>For cell modes all values need to be divided by the cell 
size (8 for C-64 cells) and can only scroll by one cell at a time (haha! Thought 
you were done with the smooth scroll registers didn't ya?) I'm excited to see 
the demo coders get their hands on this mode! 
<P></P>
<P><CITE>Do what you call <EM>cell</EM> modes include character modes or only 
bitmap modes with cell addressing? Will windowing work in character modes 
too?</CITE> 
<TABLE align=center bgColor=#dddddd border=3>
  <CAPTION>Cell Rasters vs Linear Rasters</CAPTION>
  <TBODY>
  <TR>
    <TD rowSpan=2>When I refer to cells I'm talking about the way the address 
      generator rasterizes the data. Cell raster lines are organized in memory 
      like this-- byte0, byte8, byte16 .....and so on. Linear chunky is-- byte0, 
      byte1, byte2....Super bitmaps work in all modes, chunky, cell and planar 
    <TD>
    <TH colSpan=4>Cell Rasters
    <TH>
    <TH colSpan=4>Linear Rasters 
  <TR>
    <TD>
    <TD>byte_0
    <TD>byte_8
    <TD>byte_16
    <TD>byte_24
    <TD>
    <TD>byte_0
    <TD>byte_1
    <TD>byte_2
    <TD>byte_3 </TR></TBODY></TABLE></P><CITE>Will there be character modes with 
more colors per character than the C-64? Will there be new text modes and 
different font sizes available?</CITE> 
<BLOCKQUOTE>Yes, hopefully this should include all <A title="about C-65" 
  href="http://c65.org/" target=_blank><B>C-65 modes</B></A>. These will all be 
  illustrated in the documentation</BLOCKQUOTE><CITE>How many colors are available 
in the various modes?</CITE> 
<BLOCKQUOTE>
  <UL>
    <LI>All C= display modes = 256 available colors out of 65,536 possible 
    <LI>Planar mode = 256 possible colors out of 65,536 available colors, works 
    like the Amiga 
    <LI>Chunky Mode = ALL 65536 shades of color. The video chip fetches 2 bytes 
    of data per pixel (16-Bits per pixel mode). 5-bits Red, 6-Bit Green, 5-Bits 
    Blue. In chunky mode no sprites over 24 pixels wide x 256 pixels tall 
    <LI>1280 x 1024 mode should work when finished with fetches - fetching <A 
    title="define FIFO" 
    href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=FIFO+&amp;action=Search" 
    target=_blank>FIFO</A> throws the C-64 timing of programs off, especially 
    ones using Raster interrupts, thus crashing the program 
</LI></UL></BLOCKQUOTE><CITE>Is there an 8-bpp chunky mode (ie a paletted, 
one-byte-per-pixel mode)? A mode like this has plenty of colours for games and 
since it's a single byte per pixel it should be nice and fast to draw on</CITE> 
<BLOCKQUOTE>Yes, it's already there</BLOCKQUOTE><CITE>Since the C-1 is getting 
all its pixel frequencies off a single clock - that, coupled with the copper, 
mean that we'll be able to use Amiga-style draggable screens?</CITE> 
<BLOCKQUOTE>Yes, Everything is synced from one clk</BLOCKQUOTE><CITE>How does 
overscan work? What's fetched in the borders for all the normal modes?</CITE> 
<BLOCKQUOTE>Nothing unless you set the start and stop registers there. The 
  vertical stop register can cause some strange things to happen if you set them 
  out of the screens resolution. The address generator doesn't 
reset</BLOCKQUOTE><CITE>How does windowing mode differ from the super 
bitmaps?</CITE> 
<BLOCKQUOTE>Windowing is the same as superbitmaps. Super bitmaps are set with 
  a line size and modulo to be added at the end of the line. Super bitmaps are 
  really really fast for scrolling in any direction. Almost zero CPU cycles 
  needed to do it. It's going to be very exciting to see what the demo guys will 
  do with it</BLOCKQUOTE><CITE>What about the LCD connector? I'm pretty sure Jeri 
meant the HD44780 equipped LCDs (common kind of parallel LCDs) when she designed 
that in</CITE> 
<BLOCKQUOTE>When I said TTL I meant the RGB interface. Some interface at TTL 
  levels, but most today use LVDS which my board doesn't directly support. The 
  TTL LCD's I'm talking about have a parallel interface. Usually 4 bits red, 4 
  green, 4 blue, hsync, vsync. They were used in older laptops (Apple 
  especially).</BLOCKQUOTE><CITE>I was wondering how the C-One mapped "classic 
mode" graphics onto a VGA display? I assume that to get full screen at the low 
res of the C64 that each C=64 pixel is mapped as a chunky VGA pixel? Is this 
done in HW in the new VIC?</CITE> 
<BLOCKQUOTE>The Final board has a framebuffer that takes care of the higher 
  frequencies. You could consider this as the "flickerfixer" that might be 
  familiar to Amiga users. Even if the VIC is in "full compatibility mode", 
  emulatong 15 khz horizontal frequency, the display output will be sent at VGA 
  rate to the monitor. This gives us the opportunity to sync the VIC (or any 
  other video chip that we want to have) to the CPU, and still have a VGA 
  monitor. Now that the monitor output is decoupled, we can go back to the "old 
  days" when everything on the homecomputers was run off of one crystal (the 
  typical Commodore design)</BLOCKQUOTE>
<H3>Blitter Q&amp;A</H3><CITE>How does the Blitter work?</CITE> 
<BLOCKQUOTE>Blitter has the same correlators (sp?) and <A title="about Amiga" 
  href="http://www.amigarealm.com/computing/knowledge/hardref/ch6.htm" 
  target=_blank>miniterms&nbsp;as&nbsp;the&nbsp;Amiga</A>. Blitter can grab 
  chunks of data and move them around in memory faster than the processor. This 
  works in main memory as well as video memory</BLOCKQUOTE><CITE>What can the 
blitter do, how is it set up?</CITE> 
<BLOCKQUOTE>The Blitter has two channels you select the start location of each 
  in memory and how long each line is to be. Then the modulo to be added at the 
  end of each line and the length of the blit in total bytes. Then you set the 
  destination, modulo and the function to do with the data (AND, OR, XOR, 
  ROTATE, CORNER-TURN). Then you trigger it or set it to trigger on raster 
  position</BLOCKQUOTE><CITE>Can the blitter move stuff around in main memory or 
just between main memory and video memory? Is it faster than MVP/MVN?</CITE> 
<BLOCKQUOTE>You can move stuff anywhere in the memory, but the blitter will 
  slow the processor if you are moving in main memory. The blitter is a lot 
  faster than the CPU</BLOCKQUOTE><CITE>I understand the Blitter can move bits 
between arbitrary memory ranges. Can it spreading the bits out wider as they go? 
Can it EOR them against a mask before depositing them in the target range? For 
instance, if page $0400 were full of $FF bytes, could you move them to page 
$0500 and (by spreading them apart by 1 bit as they go) fill up both pages $0500 
and $0600 with $AA bytes?</CITE> 
<BLOCKQUOTE>The blitter will be able to do this</BLOCKQUOTE><CITE>Will the 
Blitter arguments be 24 or 32 bits wide?</CITE> 
<BLOCKQUOTE>I think I'll keep the source and destination 24 bits with a 8-bit 
  Bank register. The modulus is 16 bits</BLOCKQUOTE>
<HR width="50%">
<A name=how>
<H2>Technical Details</H2></A>
<TABLE bgColor=#ffff00 border=3>
  <CAPTION>How is it done? (Technical)</CAPTION>
  <TBODY>
  <TR>
    <TD>As mentioned, the C-One project is possible thanks to programmable 
      logic technology. Traditionally computers are constructed with integrated 
      circuit chips containing many densly packed logic gates. Each chip is 
      designed to serve a specific purpose and that purpose only. VIC, CIA and 
      6510 in the C-64 are examples of these traditional integrated circuit 
      chips. Programmable logic chips are able to be custom configured as to 
      what functions they provide. <A 
      href="http://webopedia.com/TERM/P/PLD.html" target=_blank 
      alt="what's a Programmable Logic Device?">PLA&nbsp;(Programmable Logic 
      Array)</A> 82s100 in the C-64 is such a programmable logic chip which 
      provides functions specifically tailored to the C-64. Recent advances in 
      programmable logic chips makes them affordable and flexible enough for a 
      project like C-One. The <A href="http://webopedia.com/TERM/F/FPGA.html" 
      target=_blank alt="what's a FPGA?">FPGA&nbsp;(Field Programmable Gate 
      Array)</A> chips in C-One belong to this latter class of integrated 
      circuits as described below by Jens Schoenfeld: 
      <BLOCKQUOTE>The two main chips carry out different tasks, depending on 
        the needs of the program. The technology used is called FPGA - field 
        programmable gate arrays. These chips can be programmed to do the tasks 
        that the chips of the C-64 or other computers have done. It's no 
        emulation, but it's a re-implementation of the chips that are no longer 
        available since many years.<BR><BR>The one thing that is not contained 
        in the FPGAs is the main processor - it would take too much space, 
        resulting in too high cost. To maintain flexibility, the CPU resides on 
        a card that can be exchanged by the user - as simple as plugging in a 
        PCI card.<BR><BR>After a cold start, the FPGA programs are loaded from a 
        mass-storage device like harddrive, disk drive or a compact flash card. 
        What's described in one short sentence is a giant leap in computer 
        technology: The hardware can be altered by the user without even opening 
        the computer!<BR><BR>There are <A 
        href="http://c64upgra.de/c-one/pics/C1-D4.jpg" target=_blank 
        alt="close-up of FPGA">two&nbsp;FPGAs</A>, one with 30,000 gates and one 
        with 100,000 gates. The smaller (30K gates) one of the two chips is 
        totally freely programmable and is changable <EM>on the fly</EM>. We'll 
        publish tutorials, free development tools and code examples to upload 
        new cores into it. The bigger FPGA has 100K gates, and we might be able 
        to increase the board clock from 50 MHz to 60 MHz.<BR><BR>Programming 
        the small FPGA enables you to make your own graphics processor, add <A 
        href="http://webopedia.com/TERM/D/DSP.html" target=_blank 
        alt="define DSP">DSP-like</A> effects (PAL/NTSC colour smearing 
        emulation), use the flicker-fixer memory for sound (because the Sound <A 
        href="http://webopedia.com/TERM/D/DAC.html" target=_blank 
        alt="define DAC">DAC</A> is also hooked to the FPGA), add sound decoding 
        hardware, add Blitter functions, do your very own textmodes, 
        hardware-Window management - anything you can think of.<BR><BR>You won't 
        even have to be a hardware person. With <A 
        href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=vhdl" 
        target=_blank alt="explain VHDL">VHDL&nbsp;(Virtual Hardware Description 
        Language)</A> and the necessary tutorials, sample sources and an easy 
        design flow, you'll learn very quick what reconfigurable hardware is 
        about. No soldering iron needed! Not only <B>we</B> can turn your base 
        machine into a new computer by supplying a new core for the big FPGA, 
        also <B>you</B> can add completely new hardware features that your 
        program might need.<BR><BR>Think about a game that uses horizontal 
        scrolling - why not make a hardware that copies huge chunks of the 
        display memory on it's own on every vertical blank, and you only have to 
        update the new parts that are scrolled in with the CPU. Think of a 
        mixed-mode of bitplane, chunky and character display on one screen that 
        your CPU benefits from: Imagine an adventure game where the player 
        accesses a computer terminal, the surroundings are 
        bitplane/chunky/high-colour graphics, and the display contents of the 
        terminal are characters, rotated by 15 degrees, slightly distorded 
        because of the perspective. Horrible to solve with CPU horsepower, but 
        easily done in VHDL.<BR><BR>More ideas for the sound: 
        Lowpass/highpass/bandpass filters, frequency shift for the sound as the 
        player enters an underwater world, adding echo/hall effects when he 
        enters the secret chamber of his worst enemy. Make your lowpass filters 
        <B>scream</B> by letting them oscillate on their resonant frequency, and 
        have it sound as <B>fat</B> as a real TB-303 (for those not into 
        electronic music, it's a legendary bass synthesizer Roland).<BR><BR>Not 
        only multimedia applications can be done in the 30K FPGA, also 
        CPU-supporting hardware like a multiplier, divider or run-length 
        encoder/decoder can be made. A perfect sinewave calculation may support 
        your vector-graphics. Speaking of vector-graphics, full matrix 
        calculations could be done! These <A 
        href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?Arithmetic+and+Logic+Unit" 
        target=_blank 
        alt="what's an ALU?">ALU&nbsp;(Arithmetic&nbsp;Logic&nbsp;Unit)</A> 
        extensions can calculate a lot faster than your CPU can turn around and 
        fetch the result (well, if you're not calculating a fractal in the chip 
        :-)). Why waste CPU horsepower on loading graphics? The 30K FPGA has 
        direct access to the harddrive and the floppy drive, so if you want to 
        show an animation, load the truncated data, unpack then on-the-fly and 
        show them without the CPU ever having touched the data!<BR><BR>The 
        re-configuration of the FPGA can be done as often as you want. It does 
        not wear out (of course!), and the process takes a fraction of a second 
        (as fast as you can transfer 65 KBytes data with your processor), so you 
        can optimize the hardware for anything you want to do at <B>this</B> 
        part of your software (that is, at <B>this</B> game level, or on 
        <B>this</B> screen of your midi-synthesizer software).<BR><BR>Even some 
        pins of the geek port are freely programmable, so you can make your own 
        hardware that communicates with the multimedia/ALU extension part of the 
        computer through your very own, proprietary, optimized protocol. Who 
        needs CPU horse power? We have reconfigurable hardware, the 
        possibilities are unlimited!<BR><BR>Re-configurable hardware is 
        something unknown in the PC world. It's a giant leap in computer 
        technology in that a computer can <EM>load</EM> it's hardware behaviour 
        on a system reset, and is therefore upgradable <EM>in the field</EM>. In 
        the case C-One, while the CPU is running, parts of the hardware can be 
        upgraded.<BR><BR>The <EM>programs</EM> for the two FPGAs are loaded on 
        every system startup, so any bad program can do whatever it likes to, 
        it's set to default on every power-cycle. A cold start (power-cycle) can 
        load the two FPGA programs from harddisk, Compact Flash or from a 
        floppy. The floppy method is by far the slowest, taking about 13 seconds 
        for the 389 KBytes data to be transferred, but it's the easiest method 
        when trying out a new hardware configuration that you just downloaded 
        from the internet. You won't need a CF card reader/writer, the data can 
        be copied from floppy to the CF on the C-One (or to your 
        harddrive).<BR><BR>Re-configuring causes a full shutdown of the slave 
        section for a fraction of a second. I would not rely on data to retain 
        in the memory and neither graphics nor sound will work during the 
        process. No mass storage device can be accessed during re-config. 
        Theonly thing that works is the CPU, it's memory and some ports. Early 
        startup enables mass storage, giving the CPU access to new config files. 
        These config files have to be loaded into the system memory (SDRAM), and 
        then the slave section can be shut down for re-config. After re-config, 
        the mass storage devices are back online, assuming they are not kicked 
        out to make room for other stuff. In such a case, the programmer has to 
        think ahead and have a config file available in system memory to 
        re-configure another time.<BR><BR>The FPGAs are braindead if you switch 
        the C-One on, and they always have to be fully programmed. The entire 
        FPGA has to be programmed. You cannot program a part of the chip. This 
        is done in the <EM>early startup procedure</EM> which is currently under 
        development. This early startup procedure loads the FPGA cores on every 
        system startup.<BR><BR>The FPGA programming process is about in the 
        <EM>few 100 milliseconds</EM> range. The current betaboard configures 
        the small FPGA out of the ROM in about a quarter of a second (this is a 
        guess, I never measured the time). This is about the time the CPU will 
        also take for re-configuration, as the slowest part is the FPGA itself. 
        The amount of data to be moved is 65K for the small FPGA and 259K for 
        the big FPGA<BR><BR>You always generate <B>full cores</B>, a composition 
        of Jeri's and your core. If it does not work, try again. You can always 
        go back to where you started. In software terms, you will get Jeri's 
        core as kind of object code that can be linked with your work. Don't 
        worry, <B>you can't kill your machine</B> experimenting with the FPGAs! 
      </BLOCKQUOTE></TR></TBODY></TABLE>
<HR width="50%">
<A name=cpuslot></A>
<TABLE bgColor=#ffff00 border=3>
  <CAPTION>Processor Slot (Technical)</CAPTION>
  <TBODY>
  <TR>
    <TD>
      <DL>
        <DT>Timings: 
        <DD>Making a <A href="http://c64upgra.de/c-one/s_specs.htm" 
        target=_blank alt="see C-One specifications">CPU&nbsp;card</A> always 
        goes together with making a new FPGA core. Since timing on all 
        processors is (at least slightly) different, you'll have to adapt the 
        mainboard to every new CPU. You can re-define certain lines for that, 
        for example the <EM><A 
        href="http://www.westerndesigncenter.com/datasheets/W65C816S%20Datasheet.pdf" 
        target=_blank alt="see W65C816S DATA SHEET">VPA&nbsp;line</A></EM> is 
        not available on the Z80. These lines are GPIOs on the FPGA, and can be 
        turned into anything you may need </DD></DL>
      <UL>
        <LI>The only thing you cannot re-define is the BE (bus enable) and the 
        ready lines. As soon as BE is inactive, you have to tri-state the 
        complete bus (address, R/W and data), so other devices can use the board 
        bus (for example IDE DMA). Same for the ready signal, the DMA hardware 
        must be able to halt the processor for an unknown amount of cycles 
        <LI>Be careful with clock-stretching for the halting: Some processors 
        (like the real 6502) are dynamic, and <B>forget</B> their internal state 
        if the clock is streched too long. Most CPUs can be halted anyway, and 
        if that's not possible, make your own FPGA core that either uses no DMA 
        at all, or stops the DMA to give the CPU a cycle every now and then. As 
        you can see, the CPUclock line is also a GPIO and can be adapted to your 
        needs as well 
        <LI>The re-configurable hardware eases the design of a CPU card a lot. I 
        expect to have only a few parts on a CPU card, especially tristate 
        buffers for those CPUs that cannot tri-state the bus, but other CPUs 
        might be connectable without glue logic 
        <LI>We'll publish a reference design for CPU cards about the same time 
        the C-One baords will be released, and that will include a CPU detection 
        scheme. We're thinking of weak pull up/down resistors on the address 
        lines, so the FPGA can read the type of CPU in the slot, and choose the 
        proper FPGA core accordingly 
        <LI>MDB[0..7] refers to the multiplexed data bus. During Phi2 low, the 
        data lines carry the upper eight bits of the address (A16 to A23), so 
        the 65816 can come in a 40-pin package although it has much more signals 

        <LI>CPU_reset is independant of the entire system reset. Your CPU card 
        must obey this reset signal, because it is only released after all FPGAs 
        have been configured and the memory has been set up for operation (SDRAM 
        needs some init procedure!) No matter what core you're using, the 
        CPU_reset signal is active-low, meaning it's pulled to GND until both 
        FPGAs are configured. This cannot be changed, because it's controlled by 
        the early startup circuit, which is only re-configurable with special 
        equipment and the right CPLD sources. Since this is Jeri's intellectual 
        property, this will not be published. If you need an active-high reset 
        signal, an inverter will have to do 
        <LI>Using the CPU slot requires the user to remove the 65816 CPU. The 
        socket and the slot can never be used at the same time. If someone wants 
        to design a dual-cpu card that also incorporates the 65816, he must have 
        a 65816 socket on his card </LI></UL></TR></TBODY></TABLE>
<HR width="50%">
<A name=busspeed></A>
<TABLE bgColor=#ffff00 border=3>
  <CAPTION>Bus Speed (Technical)</CAPTION>
  <TBODY>
  <TR>
    <TD>
      <P>Those of you who have followed the development of the C-One since the 
      very beginning know that the first prototype was running at a bus 
      frequency of 50 MHz. The January <EM>rev 2</EM> prototype which is the 
      base for the currently running production has one significant change: It 
      uses a <A title="phase-locked loop" 
      href="http://webopedia.com/TERM/P/PLL.html" target=_blank>PLL</A> to 
      generate the bus frequency. This has two big advantages: </P>
      <OL>
        <LI>the <A title="Front Side Bus" 
        href="http://webopedia.com/TERM/f/frontside_bus.html" target=_blank>FSB 
        frequency</A> is user-selectable 
        <LI>the C-One will pass CE without any problems </LI></OL>
      <P>The choices for the FSB frequency are: </P>
      <UL>
        <LI>33.87 Mhz 
        <LI>50.80 Mhz 
        <LI>52.92 Mhz 
        <LI><B>67.74 Mhz</B> (Factory Default) 
        <LI>84.67 Mhz 
        <LI>89.96 Mhz 
        <LI>101.61 Mhz 
        <LI>105.84 Mhz 
        <LI>135.48 Mhz </LI></UL>
      <P>The board will be shipped in the <B>67.74 Mhz</B> configuration to 
      ensure proper functionality with every SIMM module, which is mandatory for 
      the early startup procedure. This SIMM module must be at least <B>4 MB</B> 
      in size, and the speed grade must be <B>60 ns</B> or faster. During our 
      tests here, we cranked up the FSB to 105.84 Mhz, and got the C-One to pass 
      early startup with a high-quality 60 ns <A title="Extended Data Output" 
      href="http://webopedia.com/TERM/E/EDO_DRAM.html" target=_blank>EDO</A> 
      memory module. 60ns FPM modules work up to 89.96 Mhz. </P>
      <P>These are the absolute maximum ratings. As the memory modules get hot, 
      their speed goes down, and pixels on the screen start flickering. Please 
      also note that the horizontal and vertical frequency of the VGA output 
      also changes with the FSB, so your monitor must support the generated 
      frequencies (which are still being adjusted, we'll publish the actual 
      frequencies later). </P>
      <P>The highest FSB frequency of 135.48 Mhz is not supported with the 
      current early startup procedure, and probably will not be any time soon. 
      Other frequencies between the steps given cannot be generated without 
      adding another crystal, which falls under the topic <EM>aftermarket 
      tuning</EM>, and cannot be done without a soldering iron. </P>
      <P>Every core will be made for a specific clock rate. Overclocking a core 
      might be possible, but is really not recommended, just as in the PC world. 
      The different FSB frequencies are meant to add to the flexibility, not to 
      unreliability! </P></TR></TBODY></TABLE>
<HR width="50%">
<A name=links></A>
<H2>C-One Resources on the WWWeb</H2>
<H3>Sales and Support</H3>
<UL>
  <LI><A href="http://commodoreone.com/">CommodoreOne.Com</A>: Official C-One 
  Home 
  <LI>The link above is now re-directed to: <A 
  href="http://c64upgra.de/c-one">C-ONE&nbsp;Reconfigurable&nbsp;Computer</A> 
  <LI><A href="http://www.c64upgra.de/">http://www.c64upgra.de/</A>: 
  CommodoreOne.Com mirror site 
  <LI><A href="http://www.jschoenfeld.de/">individual&nbsp;Computers</A>: 
  European distributor 
  <LI><A 
  href="http://groups.yahoo.com/group/CommodoreOne">CommodoreOne&nbsp;Group&nbsp;Page</A>: 
  message archive, photos and links </LI></UL>
<H3>Software</H3>
<UL>
  <LI><A href="http://www.sweetcherrie.com/jos/">JOS/WiNGs</A>: 16-bit native, 
  multitasking OS for C-One (old stuff) 
  <LI><A 
  href="http://www.king.igs.net/~billnacu/wings/">Official&nbsp;WiNGS&nbsp;Website</A>: 
  Greg Nacu's WiNGs website (newest info) 
  <LI><A href="http://www.armory.com/~spectre/cwi/hl/">HyperLink</A>: Cameron 
  Kaiser plans to support C-One in a future 3.0 version of his C-64 web browser 
  <LI><A href="http://come.to/supercpu">The&nbsp;SuperCPU&nbsp;Home</A>: Though 
  devoted to the SuperCPU, this page contains much important information and 
  programs which have been patched for 65816 compatibility </LI></UL>
<H3>Development and Programming</H3>
<UL>
  <LI><A href="http://c1boot.sourceforge.net/">C-One Boot Code</A> Developers' 
  Page 
  <LI><A href="http://www.westerndesigncenter.com/">WesternDesignCenter.Com</A>: 
  65816 manufacturer's web site 
  <LI><A 
  href="http://www.westerndesigncenter.com/65816.html">A&nbsp;6502&nbsp;Programmer's&nbsp;Introduction&nbsp;to&nbsp;the&nbsp;65816</A>: 
  by Brett Tabke 
  <LI><A 
  href="http://cerebro.xu.edu/~ryanr/atari/">65816&nbsp;Programming&nbsp;notes</A>: 
  by John Harris 
  <LI><A 
  href="http://www.canberra.edu.au/~scott/C=Hacking/C-Hacking13/cpu.html">Exploiting&nbsp;the&nbsp;65c816s&nbsp;CPU</A>: 
  by Jim Brain (from <A 
  href="http://www.canberra.edu.au/~scott/C=Hacking"><EM>C=&nbsp;Hacking</EM></A> 
  web-zine) 
  <LI><A 
  href="http://cmdrkey.com/cbm/cworld/back/index.htm"><EM>Commodore&nbsp;World&nbsp;Magazine</EM></A> 
  issues 16-24 included articles about the 65816 especially in a regular column, 
  <EM>816 Beat</EM>. Get yer back issues from <A 
  href="http://www.centsible.com/"><EM>Centsible&nbsp;Software</EM></A> 
  <LI><A 
  href="http://www.zophar.net/tech/65816.html">65816&nbsp;Technical&nbsp;Documents</A> 
  on <A href="http://www.zophar.net/">Zophar's&nbsp;Domain</A> 
  <LI><A href="http://web.starman.ee/aavo/scancodes.html">CommodoreOne PS/2 
  Keyboard decoder LUT mappings</A> done by <A title="email to Aavo" 
  href="mailto:aavo@starman.ee">Aavo Tambur</A> 
  <LI><A title="Full 32-bit processor!" 
  href="http://www.gideonz.dds.nl/">65gz032</A>: A full 32-bit processor for use 
  in the PCI slot of C-One by Gideon Zweijtzer 
  <LI><A href="http://commodore-gg.hobby.nl/cpics/ctapril2003a.jpg">Part A</A> 
  and <A href="http://commodore-gg.hobby.nl/cpics/ctapril2003b.jpg">Part B</A>: 
  An article about 32-bit processors and C-One 
  <LI><A href="http://commodore-gg.hobby.nl/verhaal51.htm">English</A> 
  translation of same article 
  <LI><A href="http://commodore-gg.hobby.nl/processor32.htm">Photo</A> of 
  65gz032 test in a breadbox C-64 
  <LI><A href="http://groups.yahoo.com/group/65GZ032/">65GZ032 - 32 bits version 
  of the 6502</A>: Yahoo! Group for 65gz032 </LI></UL>
<H3>Pictures and Stories</H3>
<UL>
  <LI><A href="http://pages.prodigy.net/snogpitch/c-one/">Dave Witmer's 
  C-One</A> built in a CLEAR MID-TOWER case and all decked out (kewl!) 
  <LI>pictures from the <A 
  href="http://webpages.charter.net/pondscum/page2.html">LUCKI Commodore Club 
  Spring Expo 2003</A>: by J. Ballard 
  <LI><A 
  href="http://mywebpages.comcast.net/raymondday/Expo%202003/">C-One&nbsp;Photos</A> 
  from LUCKI Expo 2003: courtesy of <A 
  href="mailto:raymondday@hotmail.com">Raymond&nbsp;Day</A> 
  <LI>Audio of <A 
  href="http://spike.ling.gu.se/c1_talk_2003-05-24.mp3">Jeri's&nbsp;presentation</A> 
  at LUCKI 2003 
  <LI>Pictures and video from the <A 
  href="http://c64upgra.de/c-one/pic_video.htm">C-One manufacturing</A> process 
  <LI><A href="http://www.cling.gu.se/~cl3polof/c1/">Mager Valp</A> with a C-One 
  Developer board 
  <LI><A href="http://www.geocities.com/dickestel/vintage2002.html">Vintage 
  Computer Festival 2002</A> featuring Jeri and the C-One, photos by Robert 
  Bernardo 
  <LI><A href="http://ntscene.com/gallery/albums.php">C-One&nbsp;Close-ups</A>: 
  taken by Adrian Gonzalez (dW/Style) at Chicago Expo 2002 
  <LI><A href="http://mywebpages.comcast.net/raymondday">C-One&nbsp;Photos</A> 
  from LUCKI Expo 2002: courtesy of <A 
  href="mailto:raymondday@hotmail.com">Raymond&nbsp;Day</A> 
  <LI><A 
  href="http://www.portcommodore.com/amiwest/">C-One&nbsp;At&nbsp;AmiWest&nbsp;2002</A>: 
  Larry Anderson's story of his encounter with C-One includes some great 
  close-up shots 
  <LI><A href="http://homepage.mac.com/kznight/PhotoAlbum4.html">C= LUCKY Expo 
  May 2002</A>: Ken Zito's pics include a few good shots of Jeri and C-One 
  <LI><A 
  href="http://www.eskimo.com/~strohs/C1-ATX.gif">C-One&nbsp;BackPlane</A>: An 
  abstract depiction of how the C-One backplane might appear installed in an ATX 
  case 
  <LI><A href="http://www.go64.de/deutsch/online/2002-04_2.shtml">Der Commodore 
  One</A> by von Jens Bürger on Go64 
  <LI><A href="http://www.commodore-amiga.de/c-one.htm">C-ONE -&gt;CommodoreOne: 
  Die Zukunft des Commodore 64</A> 
  <LI><A href="http://www.c64.sk/files/C1_ComputerBild.jpg">Die 
  Wiedergeburteiner Legende</A> 
  <LI><A href="http://www.pegasos-uk.com/english/news_event_03-6.html">Amiga + 
  Retrocomputing Messe 2002</A> 
  <LI><A 
  href="http://www.virtualdimension.de/inscene/arc2002/bildere.html">Amiga &amp; 
  Retro Computing</A> </LI></UL>
<H3>General Reference</H3>
<UL>
  <LI><A 
  href="http://foldoc.doc.ic.ac.uk/foldoc/index.html">Free&nbsp;Online&nbsp;Dictionary&nbsp;of&nbsp;Computing</A>: 
  A good reference for looking up all those technical terms 
  <LI><A href="http://webopedia.com/">Webopedia</A>: Another compuer dictionary, 
  more complete than FOLDOC 
  <LI><A href="http://pcguide.com/index.htm">PC&nbsp;Guide</A>: A comprehensive 
  reference to PC computer hardware. <I>My favorite PC hardware resource!</I> 
  <LI><A 
  href="http://www.pctechguide.com/index.htm">The&nbsp;Technology&nbsp;Guide</A>: 
  A good PC hardware reference with lots of pictures and tables 
  <LI><A 
  href="http://www.nvg.ntnu.no/amiga/amigafaq/AmigaFAQ_toc.html">Amiga-FAQ</A>: 
  Jeri was influenced by Jay Miner's masterpiece and this FAQ should help you 
  understand some of her "Amiga-ese" 
  <LI><A 
  href="http://www.amigarealm.com/computing/nkb12.htm">Amiga&nbsp;Hardware&nbsp;Reference&nbsp;Manuals</A>: 
  The detailed descriptions of Amiga chipset here reveals many similarities with 
  C-One 
  <LI><A 
  href="http://www.amigarealm.com/computing/knowledge/kb53.htm">Amiga&nbsp;Glossary</A>: 
  The "Dummies Guide" to Coppers and Blitters ;) 
  <LI><A 
  href="http://amiga.emugaming.com/glossary.html">Another&nbsp;Amiga&nbsp;Glossary</A>: 
  More definitions to those Amiga terms </LI></UL>
<H3>These places have pictures and descriptions of ATX cases and power 
supplies:</H3>
<UL>
  <LI><A 
  href="http://www.ccusaonline.com/Merchant2/merchant.mv?Screen=CTGY&amp;Store_Code=ccusa&amp;Category_Code=case">Interesting 
  Cases</A>: This place has some attractive ATX cases which can be used for 
  C-One 
  <LI><A href="http://www.formfactors.org/">ATX Form Factor Specifications</A> 
  <LI><A href="http://pcguide.com/ref/case/index.htm">PCGuide.com</A> 
  <LI><A 
  href="http://www.villagegeek.com/techsupport/primer/primer.htm">VillageGeek.com</A> 

  <LI><A 
  href="http://www.baber.com/barebone-computers/barebone_cpu_midrange.htm">BareBones-Computers</A> 

  <LI><A href="http://www.caseoutlet.com/case/default.htm">CaseOutlet.com</A> 
  </LI></UL><A name=subscribe></A>
<FORM action=http://groups.yahoo.com/subscribe/CommodoreOne method=get>
<TABLE cellSpacing=0 cellPadding=2 bgColor=#ffffcc border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><B>Subscribe to CommodoreOne</B> 
  <TR>
    <TD><INPUT value="enter email address" name=user> 
    <TD><INPUT type=image alt="Click here to join CommodoreOne" src="" 
      border=0 name="Click here to join CommodoreOne"> 
  <TR align=middle>
    <TD colSpan=2>Powered by <A 
      href="http://groups.yahoo.com/">groups.yahoo.com</A> 
</TR></TBODY></TABLE></FORM>
<HR>

<P align=center><A href="http://www.geocities.com/profdredd"><IMG alt=HOME 
src="C-One Details Page_files/gologo.gif"></A> </P>
<ADDRESS>This page was last updated August 13, 2005<BR>© <A 
href="mailto:profdredd@yahoo.com">Dredd Productions, Ltd</A> </ADDRESS><!-- text below generated by server. PLEASE REMOVE --></OBJECT></LAYER>
<DIV></DIV></SPAN></STYLE></NOSCRIPT></TABLE></SCRIPT></APPLET>
<SCRIPT language=JavaScript src="C-One Details Page_files/mc.js"></SCRIPT>

<SCRIPT language=JavaScript src="C-One Details Page_files/geov2.js"></SCRIPT>

<SCRIPT language=javascript>geovisit();</SCRIPT>
<NOSCRIPT><BUG alt="setstats" height="1" width="1" border="0" 
src="http://visit.webhosting.yahoo.com/visit.gif?us1143606965"></NOSCRIPT><BUG 
HEIGHT="1" WIDTH="1" ALT="1" 
SRC="http://geo.yahoo.com/serv?s=76001067&amp;t=1143606965&amp;f=us-w71"></BODY></HTML>
